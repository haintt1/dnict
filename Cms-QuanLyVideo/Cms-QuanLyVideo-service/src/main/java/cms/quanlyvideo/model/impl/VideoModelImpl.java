/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package cms.quanlyvideo.model.impl;

import cms.quanlyvideo.model.Video;
import cms.quanlyvideo.model.VideoModel;
import cms.quanlyvideo.model.VideoSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Video service. Represents a row in the &quot;cms_quanlyvideo_video&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>VideoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VideoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see VideoImpl
 * @generated
 */
@JSON(strict = true)
public class VideoModelImpl extends BaseModelImpl<Video> implements VideoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a video model instance should use the <code>Video</code> interface instead.
	 */
	public static final String TABLE_NAME = "cms_quanlyvideo_video";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"ten", Types.VARCHAR}, {"moTa", Types.VARCHAR},
		{"noiDung", Types.VARCHAR}, {"duongDan", Types.VARCHAR},
		{"luotXem", Types.BIGINT}, {"luotThich", Types.BIGINT},
		{"tuKhoa", Types.VARCHAR}, {"choBinhLuan", Types.BIGINT},
		{"trangThai", Types.BIGINT}, {"daXoa", Types.BIGINT},
		{"ngayTao", Types.TIMESTAMP}, {"ngaySua", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ten", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("moTa", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noiDung", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("duongDan", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("luotXem", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("luotThich", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tuKhoa", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("choBinhLuan", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("trangThai", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("daXoa", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ngayTao", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ngaySua", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cms_quanlyvideo_video (id_ LONG not null primary key,companyId LONG,groupId LONG,userId LONG,ten VARCHAR(75) null,moTa VARCHAR(75) null,noiDung VARCHAR(75) null,duongDan VARCHAR(75) null,luotXem LONG,luotThich LONG,tuKhoa VARCHAR(75) null,choBinhLuan LONG,trangThai LONG,daXoa LONG,ngayTao DATE null,ngaySua DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table cms_quanlyvideo_video";

	public static final String ORDER_BY_JPQL = " ORDER BY video.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY cms_quanlyvideo_video.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TEN_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Video toModel(VideoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Video model = new VideoImpl();

		model.setId(soapModel.getId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setTen(soapModel.getTen());
		model.setMoTa(soapModel.getMoTa());
		model.setNoiDung(soapModel.getNoiDung());
		model.setDuongDan(soapModel.getDuongDan());
		model.setLuotXem(soapModel.getLuotXem());
		model.setLuotThich(soapModel.getLuotThich());
		model.setTuKhoa(soapModel.getTuKhoa());
		model.setChoBinhLuan(soapModel.getChoBinhLuan());
		model.setTrangThai(soapModel.getTrangThai());
		model.setDaXoa(soapModel.getDaXoa());
		model.setNgayTao(soapModel.getNgayTao());
		model.setNgaySua(soapModel.getNgaySua());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Video> toModels(VideoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Video> models = new ArrayList<Video>(soapModels.length);

		for (VideoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public VideoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Video.class;
	}

	@Override
	public String getModelClassName() {
		return Video.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Video, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Video, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Video, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Video)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Video, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Video, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Video)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Video, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Video, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Video, Object>>
		_attributeGetterFunctions;

	static {
		Map<String, Function<Video, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Video, Object>>();

		attributeGetterFunctions.put("id", Video::getId);
		attributeGetterFunctions.put("companyId", Video::getCompanyId);
		attributeGetterFunctions.put("groupId", Video::getGroupId);
		attributeGetterFunctions.put("userId", Video::getUserId);
		attributeGetterFunctions.put("ten", Video::getTen);
		attributeGetterFunctions.put("moTa", Video::getMoTa);
		attributeGetterFunctions.put("noiDung", Video::getNoiDung);
		attributeGetterFunctions.put("duongDan", Video::getDuongDan);
		attributeGetterFunctions.put("luotXem", Video::getLuotXem);
		attributeGetterFunctions.put("luotThich", Video::getLuotThich);
		attributeGetterFunctions.put("tuKhoa", Video::getTuKhoa);
		attributeGetterFunctions.put("choBinhLuan", Video::getChoBinhLuan);
		attributeGetterFunctions.put("trangThai", Video::getTrangThai);
		attributeGetterFunctions.put("daXoa", Video::getDaXoa);
		attributeGetterFunctions.put("ngayTao", Video::getNgayTao);
		attributeGetterFunctions.put("ngaySua", Video::getNgaySua);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
	}

	private static final Map<String, BiConsumer<Video, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, BiConsumer<Video, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Video, ?>>();

		attributeSetterBiConsumers.put(
			"id", (BiConsumer<Video, Long>)Video::setId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Video, Long>)Video::setCompanyId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Video, Long>)Video::setGroupId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Video, Long>)Video::setUserId);
		attributeSetterBiConsumers.put(
			"ten", (BiConsumer<Video, String>)Video::setTen);
		attributeSetterBiConsumers.put(
			"moTa", (BiConsumer<Video, String>)Video::setMoTa);
		attributeSetterBiConsumers.put(
			"noiDung", (BiConsumer<Video, String>)Video::setNoiDung);
		attributeSetterBiConsumers.put(
			"duongDan", (BiConsumer<Video, String>)Video::setDuongDan);
		attributeSetterBiConsumers.put(
			"luotXem", (BiConsumer<Video, Long>)Video::setLuotXem);
		attributeSetterBiConsumers.put(
			"luotThich", (BiConsumer<Video, Long>)Video::setLuotThich);
		attributeSetterBiConsumers.put(
			"tuKhoa", (BiConsumer<Video, String>)Video::setTuKhoa);
		attributeSetterBiConsumers.put(
			"choBinhLuan", (BiConsumer<Video, Long>)Video::setChoBinhLuan);
		attributeSetterBiConsumers.put(
			"trangThai", (BiConsumer<Video, Long>)Video::setTrangThai);
		attributeSetterBiConsumers.put(
			"daXoa", (BiConsumer<Video, Long>)Video::setDaXoa);
		attributeSetterBiConsumers.put(
			"ngayTao", (BiConsumer<Video, Date>)Video::setNgayTao);
		attributeSetterBiConsumers.put(
			"ngaySua", (BiConsumer<Video, Date>)Video::setNgaySua);

		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getTen() {
		if (_ten == null) {
			return "";
		}
		else {
			return _ten;
		}
	}

	@Override
	public void setTen(String ten) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ten = ten;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTen() {
		return getColumnOriginalValue("ten");
	}

	@JSON
	@Override
	public String getMoTa() {
		if (_moTa == null) {
			return "";
		}
		else {
			return _moTa;
		}
	}

	@Override
	public void setMoTa(String moTa) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_moTa = moTa;
	}

	@JSON
	@Override
	public String getNoiDung() {
		if (_noiDung == null) {
			return "";
		}
		else {
			return _noiDung;
		}
	}

	@Override
	public void setNoiDung(String noiDung) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noiDung = noiDung;
	}

	@JSON
	@Override
	public String getDuongDan() {
		if (_duongDan == null) {
			return "";
		}
		else {
			return _duongDan;
		}
	}

	@Override
	public void setDuongDan(String duongDan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_duongDan = duongDan;
	}

	@JSON
	@Override
	public long getLuotXem() {
		return _luotXem;
	}

	@Override
	public void setLuotXem(long luotXem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_luotXem = luotXem;
	}

	@JSON
	@Override
	public long getLuotThich() {
		return _luotThich;
	}

	@Override
	public void setLuotThich(long luotThich) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_luotThich = luotThich;
	}

	@JSON
	@Override
	public String getTuKhoa() {
		if (_tuKhoa == null) {
			return "";
		}
		else {
			return _tuKhoa;
		}
	}

	@Override
	public void setTuKhoa(String tuKhoa) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tuKhoa = tuKhoa;
	}

	@JSON
	@Override
	public long getChoBinhLuan() {
		return _choBinhLuan;
	}

	@Override
	public void setChoBinhLuan(long choBinhLuan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_choBinhLuan = choBinhLuan;
	}

	@JSON
	@Override
	public long getTrangThai() {
		return _trangThai;
	}

	@Override
	public void setTrangThai(long trangThai) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trangThai = trangThai;
	}

	@JSON
	@Override
	public long getDaXoa() {
		return _daXoa;
	}

	@Override
	public void setDaXoa(long daXoa) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_daXoa = daXoa;
	}

	@JSON
	@Override
	public Date getNgayTao() {
		return _ngayTao;
	}

	@Override
	public void setNgayTao(Date ngayTao) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngayTao = ngayTao;
	}

	@JSON
	@Override
	public Date getNgaySua() {
		return _ngaySua;
	}

	@Override
	public void setNgaySua(Date ngaySua) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngaySua = ngaySua;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Video.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Video toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Video>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VideoImpl videoImpl = new VideoImpl();

		videoImpl.setId(getId());
		videoImpl.setCompanyId(getCompanyId());
		videoImpl.setGroupId(getGroupId());
		videoImpl.setUserId(getUserId());
		videoImpl.setTen(getTen());
		videoImpl.setMoTa(getMoTa());
		videoImpl.setNoiDung(getNoiDung());
		videoImpl.setDuongDan(getDuongDan());
		videoImpl.setLuotXem(getLuotXem());
		videoImpl.setLuotThich(getLuotThich());
		videoImpl.setTuKhoa(getTuKhoa());
		videoImpl.setChoBinhLuan(getChoBinhLuan());
		videoImpl.setTrangThai(getTrangThai());
		videoImpl.setDaXoa(getDaXoa());
		videoImpl.setNgayTao(getNgayTao());
		videoImpl.setNgaySua(getNgaySua());

		videoImpl.resetOriginalValues();

		return videoImpl;
	}

	@Override
	public int compareTo(Video video) {
		int value = 0;

		if (getId() < video.getId()) {
			value = -1;
		}
		else if (getId() > video.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Video)) {
			return false;
		}

		Video video = (Video)object;

		long primaryKey = video.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Video> toCacheModel() {
		VideoCacheModel videoCacheModel = new VideoCacheModel();

		videoCacheModel.id = getId();

		videoCacheModel.companyId = getCompanyId();

		videoCacheModel.groupId = getGroupId();

		videoCacheModel.userId = getUserId();

		videoCacheModel.ten = getTen();

		String ten = videoCacheModel.ten;

		if ((ten != null) && (ten.length() == 0)) {
			videoCacheModel.ten = null;
		}

		videoCacheModel.moTa = getMoTa();

		String moTa = videoCacheModel.moTa;

		if ((moTa != null) && (moTa.length() == 0)) {
			videoCacheModel.moTa = null;
		}

		videoCacheModel.noiDung = getNoiDung();

		String noiDung = videoCacheModel.noiDung;

		if ((noiDung != null) && (noiDung.length() == 0)) {
			videoCacheModel.noiDung = null;
		}

		videoCacheModel.duongDan = getDuongDan();

		String duongDan = videoCacheModel.duongDan;

		if ((duongDan != null) && (duongDan.length() == 0)) {
			videoCacheModel.duongDan = null;
		}

		videoCacheModel.luotXem = getLuotXem();

		videoCacheModel.luotThich = getLuotThich();

		videoCacheModel.tuKhoa = getTuKhoa();

		String tuKhoa = videoCacheModel.tuKhoa;

		if ((tuKhoa != null) && (tuKhoa.length() == 0)) {
			videoCacheModel.tuKhoa = null;
		}

		videoCacheModel.choBinhLuan = getChoBinhLuan();

		videoCacheModel.trangThai = getTrangThai();

		videoCacheModel.daXoa = getDaXoa();

		Date ngayTao = getNgayTao();

		if (ngayTao != null) {
			videoCacheModel.ngayTao = ngayTao.getTime();
		}
		else {
			videoCacheModel.ngayTao = Long.MIN_VALUE;
		}

		Date ngaySua = getNgaySua();

		if (ngaySua != null) {
			videoCacheModel.ngaySua = ngaySua.getTime();
		}
		else {
			videoCacheModel.ngaySua = Long.MIN_VALUE;
		}

		return videoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Video, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Video, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Video, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Video)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Video, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Video, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Video, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Video)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Video>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Video.class, ModelWrapper.class);

	}

	private long _id;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private String _ten;
	private String _moTa;
	private String _noiDung;
	private String _duongDan;
	private long _luotXem;
	private long _luotThich;
	private String _tuKhoa;
	private long _choBinhLuan;
	private long _trangThai;
	private long _daXoa;
	private Date _ngayTao;
	private Date _ngaySua;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Video, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Video)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("ten", _ten);
		_columnOriginalValues.put("moTa", _moTa);
		_columnOriginalValues.put("noiDung", _noiDung);
		_columnOriginalValues.put("duongDan", _duongDan);
		_columnOriginalValues.put("luotXem", _luotXem);
		_columnOriginalValues.put("luotThich", _luotThich);
		_columnOriginalValues.put("tuKhoa", _tuKhoa);
		_columnOriginalValues.put("choBinhLuan", _choBinhLuan);
		_columnOriginalValues.put("trangThai", _trangThai);
		_columnOriginalValues.put("daXoa", _daXoa);
		_columnOriginalValues.put("ngayTao", _ngayTao);
		_columnOriginalValues.put("ngaySua", _ngaySua);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("companyId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("ten", 16L);

		columnBitmasks.put("moTa", 32L);

		columnBitmasks.put("noiDung", 64L);

		columnBitmasks.put("duongDan", 128L);

		columnBitmasks.put("luotXem", 256L);

		columnBitmasks.put("luotThich", 512L);

		columnBitmasks.put("tuKhoa", 1024L);

		columnBitmasks.put("choBinhLuan", 2048L);

		columnBitmasks.put("trangThai", 4096L);

		columnBitmasks.put("daXoa", 8192L);

		columnBitmasks.put("ngayTao", 16384L);

		columnBitmasks.put("ngaySua", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Video _escapedModel;

}