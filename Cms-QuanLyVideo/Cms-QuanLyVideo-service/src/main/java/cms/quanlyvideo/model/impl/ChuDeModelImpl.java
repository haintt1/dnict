/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package cms.quanlyvideo.model.impl;

import cms.quanlyvideo.model.ChuDe;
import cms.quanlyvideo.model.ChuDeModel;
import cms.quanlyvideo.model.ChuDeSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ChuDe service. Represents a row in the &quot;Cms_quanlyvideo_chude&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ChuDeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ChuDeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ChuDeImpl
 * @generated
 */
@JSON(strict = true)
public class ChuDeModelImpl extends BaseModelImpl<ChuDe> implements ChuDeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a chu de model instance should use the <code>ChuDe</code> interface instead.
	 */
	public static final String TABLE_NAME = "Cms_quanlyvideo_chude";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"ten", Types.VARCHAR}, {"moTa", Types.VARCHAR},
		{"trangThai", Types.BIGINT}, {"daXoa", Types.BIGINT},
		{"ngayTao", Types.TIMESTAMP}, {"ngaySua", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ten", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("moTa", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trangThai", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("daXoa", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ngayTao", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ngaySua", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Cms_quanlyvideo_chude (id_ LONG not null primary key,groupId LONG,companyId LONG,userId LONG,ten VARCHAR(75) null,moTa VARCHAR(75) null,trangThai LONG,daXoa LONG,ngayTao DATE null,ngaySua DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table Cms_quanlyvideo_chude";

	public static final String ORDER_BY_JPQL = " ORDER BY chuDe.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Cms_quanlyvideo_chude.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TEN_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static ChuDe toModel(ChuDeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ChuDe model = new ChuDeImpl();

		model.setId(soapModel.getId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setTen(soapModel.getTen());
		model.setMoTa(soapModel.getMoTa());
		model.setTrangThai(soapModel.getTrangThai());
		model.setDaXoa(soapModel.getDaXoa());
		model.setNgayTao(soapModel.getNgayTao());
		model.setNgaySua(soapModel.getNgaySua());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<ChuDe> toModels(ChuDeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ChuDe> models = new ArrayList<ChuDe>(soapModels.length);

		for (ChuDeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ChuDeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ChuDe.class;
	}

	@Override
	public String getModelClassName() {
		return ChuDe.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ChuDe, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ChuDe, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ChuDe, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((ChuDe)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ChuDe, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ChuDe, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((ChuDe)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ChuDe, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ChuDe, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ChuDe, Object>>
		_attributeGetterFunctions;

	static {
		Map<String, Function<ChuDe, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ChuDe, Object>>();

		attributeGetterFunctions.put("id", ChuDe::getId);
		attributeGetterFunctions.put("groupId", ChuDe::getGroupId);
		attributeGetterFunctions.put("companyId", ChuDe::getCompanyId);
		attributeGetterFunctions.put("userId", ChuDe::getUserId);
		attributeGetterFunctions.put("ten", ChuDe::getTen);
		attributeGetterFunctions.put("moTa", ChuDe::getMoTa);
		attributeGetterFunctions.put("trangThai", ChuDe::getTrangThai);
		attributeGetterFunctions.put("daXoa", ChuDe::getDaXoa);
		attributeGetterFunctions.put("ngayTao", ChuDe::getNgayTao);
		attributeGetterFunctions.put("ngaySua", ChuDe::getNgaySua);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
	}

	private static final Map<String, BiConsumer<ChuDe, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, BiConsumer<ChuDe, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ChuDe, ?>>();

		attributeSetterBiConsumers.put(
			"id", (BiConsumer<ChuDe, Long>)ChuDe::setId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<ChuDe, Long>)ChuDe::setGroupId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<ChuDe, Long>)ChuDe::setCompanyId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<ChuDe, Long>)ChuDe::setUserId);
		attributeSetterBiConsumers.put(
			"ten", (BiConsumer<ChuDe, String>)ChuDe::setTen);
		attributeSetterBiConsumers.put(
			"moTa", (BiConsumer<ChuDe, String>)ChuDe::setMoTa);
		attributeSetterBiConsumers.put(
			"trangThai", (BiConsumer<ChuDe, Long>)ChuDe::setTrangThai);
		attributeSetterBiConsumers.put(
			"daXoa", (BiConsumer<ChuDe, Long>)ChuDe::setDaXoa);
		attributeSetterBiConsumers.put(
			"ngayTao", (BiConsumer<ChuDe, Date>)ChuDe::setNgayTao);
		attributeSetterBiConsumers.put(
			"ngaySua", (BiConsumer<ChuDe, Date>)ChuDe::setNgaySua);

		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getTen() {
		if (_ten == null) {
			return "";
		}
		else {
			return _ten;
		}
	}

	@Override
	public void setTen(String ten) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ten = ten;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTen() {
		return getColumnOriginalValue("ten");
	}

	@JSON
	@Override
	public String getMoTa() {
		if (_moTa == null) {
			return "";
		}
		else {
			return _moTa;
		}
	}

	@Override
	public void setMoTa(String moTa) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_moTa = moTa;
	}

	@JSON
	@Override
	public long getTrangThai() {
		return _trangThai;
	}

	@Override
	public void setTrangThai(long trangThai) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trangThai = trangThai;
	}

	@JSON
	@Override
	public long getDaXoa() {
		return _daXoa;
	}

	@Override
	public void setDaXoa(long daXoa) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_daXoa = daXoa;
	}

	@JSON
	@Override
	public Date getNgayTao() {
		return _ngayTao;
	}

	@Override
	public void setNgayTao(Date ngayTao) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngayTao = ngayTao;
	}

	@JSON
	@Override
	public Date getNgaySua() {
		return _ngaySua;
	}

	@Override
	public void setNgaySua(Date ngaySua) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngaySua = ngaySua;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ChuDe.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ChuDe toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ChuDe>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ChuDeImpl chuDeImpl = new ChuDeImpl();

		chuDeImpl.setId(getId());
		chuDeImpl.setGroupId(getGroupId());
		chuDeImpl.setCompanyId(getCompanyId());
		chuDeImpl.setUserId(getUserId());
		chuDeImpl.setTen(getTen());
		chuDeImpl.setMoTa(getMoTa());
		chuDeImpl.setTrangThai(getTrangThai());
		chuDeImpl.setDaXoa(getDaXoa());
		chuDeImpl.setNgayTao(getNgayTao());
		chuDeImpl.setNgaySua(getNgaySua());

		chuDeImpl.resetOriginalValues();

		return chuDeImpl;
	}

	@Override
	public int compareTo(ChuDe chuDe) {
		int value = 0;

		if (getId() < chuDe.getId()) {
			value = -1;
		}
		else if (getId() > chuDe.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ChuDe)) {
			return false;
		}

		ChuDe chuDe = (ChuDe)object;

		long primaryKey = chuDe.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ChuDe> toCacheModel() {
		ChuDeCacheModel chuDeCacheModel = new ChuDeCacheModel();

		chuDeCacheModel.id = getId();

		chuDeCacheModel.groupId = getGroupId();

		chuDeCacheModel.companyId = getCompanyId();

		chuDeCacheModel.userId = getUserId();

		chuDeCacheModel.ten = getTen();

		String ten = chuDeCacheModel.ten;

		if ((ten != null) && (ten.length() == 0)) {
			chuDeCacheModel.ten = null;
		}

		chuDeCacheModel.moTa = getMoTa();

		String moTa = chuDeCacheModel.moTa;

		if ((moTa != null) && (moTa.length() == 0)) {
			chuDeCacheModel.moTa = null;
		}

		chuDeCacheModel.trangThai = getTrangThai();

		chuDeCacheModel.daXoa = getDaXoa();

		Date ngayTao = getNgayTao();

		if (ngayTao != null) {
			chuDeCacheModel.ngayTao = ngayTao.getTime();
		}
		else {
			chuDeCacheModel.ngayTao = Long.MIN_VALUE;
		}

		Date ngaySua = getNgaySua();

		if (ngaySua != null) {
			chuDeCacheModel.ngaySua = ngaySua.getTime();
		}
		else {
			chuDeCacheModel.ngaySua = Long.MIN_VALUE;
		}

		return chuDeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ChuDe, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ChuDe, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ChuDe, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ChuDe)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ChuDe, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ChuDe, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ChuDe, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ChuDe)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ChuDe>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ChuDe.class, ModelWrapper.class);

	}

	private long _id;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _ten;
	private String _moTa;
	private long _trangThai;
	private long _daXoa;
	private Date _ngayTao;
	private Date _ngaySua;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ChuDe, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ChuDe)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("ten", _ten);
		_columnOriginalValues.put("moTa", _moTa);
		_columnOriginalValues.put("trangThai", _trangThai);
		_columnOriginalValues.put("daXoa", _daXoa);
		_columnOriginalValues.put("ngayTao", _ngayTao);
		_columnOriginalValues.put("ngaySua", _ngaySua);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("ten", 16L);

		columnBitmasks.put("moTa", 32L);

		columnBitmasks.put("trangThai", 64L);

		columnBitmasks.put("daXoa", 128L);

		columnBitmasks.put("ngayTao", 256L);

		columnBitmasks.put("ngaySua", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ChuDe _escapedModel;

}