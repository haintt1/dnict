/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package vn.dnict.qlnhuanbut.service.base;

import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalService;
import com.liferay.portal.kernel.service.persistence.BasePersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Reference;

import vn.dnict.qlnhuanbut.model.HeSoTheLoai;
import vn.dnict.qlnhuanbut.service.HeSoTheLoaiLocalService;
import vn.dnict.qlnhuanbut.service.HeSoTheLoaiLocalServiceUtil;
import vn.dnict.qlnhuanbut.service.persistence.DinhMucPersistence;
import vn.dnict.qlnhuanbut.service.persistence.HeSoLoaiAPPersistence;
import vn.dnict.qlnhuanbut.service.persistence.HeSoTheLoaiPersistence;
import vn.dnict.qlnhuanbut.service.persistence.ThongKeNBPersistence;

/**
 * Provides the base implementation for the he so the loai local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link vn.dnict.qlnhuanbut.service.impl.HeSoTheLoaiLocalServiceImpl}.
 * </p>
 *
 * @author dnict
 * @see vn.dnict.qlnhuanbut.service.impl.HeSoTheLoaiLocalServiceImpl
 * @generated
 */
public abstract class HeSoTheLoaiLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements AopService, HeSoTheLoaiLocalService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>HeSoTheLoaiLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>HeSoTheLoaiLocalServiceUtil</code>.
	 */

	/**
	 * Adds the he so the loai to the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect HeSoTheLoaiLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param heSoTheLoai the he so the loai
	 * @return the he so the loai that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public HeSoTheLoai addHeSoTheLoai(HeSoTheLoai heSoTheLoai) {
		heSoTheLoai.setNew(true);

		return heSoTheLoaiPersistence.update(heSoTheLoai);
	}

	/**
	 * Creates a new he so the loai with the primary key. Does not add the he so the loai to the database.
	 *
	 * @param id the primary key for the new he so the loai
	 * @return the new he so the loai
	 */
	@Override
	@Transactional(enabled = false)
	public HeSoTheLoai createHeSoTheLoai(long id) {
		return heSoTheLoaiPersistence.create(id);
	}

	/**
	 * Deletes the he so the loai with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect HeSoTheLoaiLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param id the primary key of the he so the loai
	 * @return the he so the loai that was removed
	 * @throws PortalException if a he so the loai with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public HeSoTheLoai deleteHeSoTheLoai(long id) throws PortalException {
		return heSoTheLoaiPersistence.remove(id);
	}

	/**
	 * Deletes the he so the loai from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect HeSoTheLoaiLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param heSoTheLoai the he so the loai
	 * @return the he so the loai that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public HeSoTheLoai deleteHeSoTheLoai(HeSoTheLoai heSoTheLoai) {
		return heSoTheLoaiPersistence.remove(heSoTheLoai);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			HeSoTheLoai.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return heSoTheLoaiPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>vn.dnict.qlnhuanbut.model.impl.HeSoTheLoaiModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return heSoTheLoaiPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>vn.dnict.qlnhuanbut.model.impl.HeSoTheLoaiModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return heSoTheLoaiPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return heSoTheLoaiPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return heSoTheLoaiPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public HeSoTheLoai fetchHeSoTheLoai(long id) {
		return heSoTheLoaiPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the he so the loai with the primary key.
	 *
	 * @param id the primary key of the he so the loai
	 * @return the he so the loai
	 * @throws PortalException if a he so the loai with the primary key could not be found
	 */
	@Override
	public HeSoTheLoai getHeSoTheLoai(long id) throws PortalException {
		return heSoTheLoaiPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(heSoTheLoaiLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(HeSoTheLoai.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			heSoTheLoaiLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(HeSoTheLoai.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(heSoTheLoaiLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(HeSoTheLoai.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	public PersistedModel createPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return heSoTheLoaiPersistence.create(((Long)primaryKeyObj).longValue());
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return heSoTheLoaiLocalService.deleteHeSoTheLoai(
			(HeSoTheLoai)persistedModel);
	}

	public BasePersistence<HeSoTheLoai> getBasePersistence() {
		return heSoTheLoaiPersistence;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return heSoTheLoaiPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the he so the loais.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>vn.dnict.qlnhuanbut.model.impl.HeSoTheLoaiModelImpl</code>.
	 * </p>
	 *
	 * @param start the lower bound of the range of he so the loais
	 * @param end the upper bound of the range of he so the loais (not inclusive)
	 * @return the range of he so the loais
	 */
	@Override
	public List<HeSoTheLoai> getHeSoTheLoais(int start, int end) {
		return heSoTheLoaiPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of he so the loais.
	 *
	 * @return the number of he so the loais
	 */
	@Override
	public int getHeSoTheLoaisCount() {
		return heSoTheLoaiPersistence.countAll();
	}

	/**
	 * Updates the he so the loai in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect HeSoTheLoaiLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param heSoTheLoai the he so the loai
	 * @return the he so the loai that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public HeSoTheLoai updateHeSoTheLoai(HeSoTheLoai heSoTheLoai) {
		return heSoTheLoaiPersistence.update(heSoTheLoai);
	}

	@Deactivate
	protected void deactivate() {
		HeSoTheLoaiLocalServiceUtil.setService(null);
	}

	@Override
	public Class<?>[] getAopInterfaces() {
		return new Class<?>[] {
			HeSoTheLoaiLocalService.class, IdentifiableOSGiService.class,
			PersistedModelLocalService.class
		};
	}

	@Override
	public void setAopProxy(Object aopProxy) {
		heSoTheLoaiLocalService = (HeSoTheLoaiLocalService)aopProxy;

		HeSoTheLoaiLocalServiceUtil.setService(heSoTheLoaiLocalService);
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return HeSoTheLoaiLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return HeSoTheLoai.class;
	}

	protected String getModelClassName() {
		return HeSoTheLoai.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = heSoTheLoaiPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception exception) {
			throw new SystemException(exception);
		}
	}

	@Reference
	protected DinhMucPersistence dinhMucPersistence;

	@Reference
	protected HeSoLoaiAPPersistence heSoLoaiAPPersistence;

	protected HeSoTheLoaiLocalService heSoTheLoaiLocalService;

	@Reference
	protected HeSoTheLoaiPersistence heSoTheLoaiPersistence;

	@Reference
	protected ThongKeNBPersistence thongKeNBPersistence;

	@Reference
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	private static final Log _log = LogFactoryUtil.getLog(
		HeSoTheLoaiLocalServiceBaseImpl.class);

}