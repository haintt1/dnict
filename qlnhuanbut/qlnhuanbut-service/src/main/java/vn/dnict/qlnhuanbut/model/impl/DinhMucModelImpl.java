/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package vn.dnict.qlnhuanbut.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import vn.dnict.qlnhuanbut.model.DinhMuc;
import vn.dnict.qlnhuanbut.model.DinhMucModel;
import vn.dnict.qlnhuanbut.model.DinhMucSoap;

/**
 * The base model implementation for the DinhMuc service. Represents a row in the &quot;cw_nhuanbut_dinhmuc&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DinhMucModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DinhMucImpl}.
 * </p>
 *
 * @author dnict
 * @see DinhMucImpl
 * @generated
 */
@JSON(strict = true)
public class DinhMucModelImpl
	extends BaseModelImpl<DinhMuc> implements DinhMucModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dinh muc model instance should use the <code>DinhMuc</code> interface instead.
	 */
	public static final String TABLE_NAME = "cw_nhuanbut_dinhmuc";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"loaidinhmuc", Types.INTEGER},
		{"gia", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("loaidinhmuc", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("gia", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cw_nhuanbut_dinhmuc (id_ LONG not null primary key,loaidinhmuc INTEGER,gia VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table cw_nhuanbut_dinhmuc";

	public static final String ORDER_BY_JPQL = " ORDER BY dinhMuc.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY cw_nhuanbut_dinhmuc.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static DinhMuc toModel(DinhMucSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DinhMuc model = new DinhMucImpl();

		model.setId(soapModel.getId());
		model.setLoaidinhmuc(soapModel.getLoaidinhmuc());
		model.setGia(soapModel.getGia());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<DinhMuc> toModels(DinhMucSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DinhMuc> models = new ArrayList<DinhMuc>(soapModels.length);

		for (DinhMucSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public DinhMucModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DinhMuc.class;
	}

	@Override
	public String getModelClassName() {
		return DinhMuc.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DinhMuc, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DinhMuc, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DinhMuc, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((DinhMuc)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DinhMuc, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DinhMuc, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DinhMuc)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DinhMuc, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DinhMuc, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DinhMuc, Object>>
		_attributeGetterFunctions;

	static {
		Map<String, Function<DinhMuc, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DinhMuc, Object>>();

		attributeGetterFunctions.put("id", DinhMuc::getId);
		attributeGetterFunctions.put("loaidinhmuc", DinhMuc::getLoaidinhmuc);
		attributeGetterFunctions.put("gia", DinhMuc::getGia);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
	}

	private static final Map<String, BiConsumer<DinhMuc, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, BiConsumer<DinhMuc, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DinhMuc, ?>>();

		attributeSetterBiConsumers.put(
			"id", (BiConsumer<DinhMuc, Long>)DinhMuc::setId);
		attributeSetterBiConsumers.put(
			"loaidinhmuc",
			(BiConsumer<DinhMuc, Integer>)DinhMuc::setLoaidinhmuc);
		attributeSetterBiConsumers.put(
			"gia", (BiConsumer<DinhMuc, String>)DinhMuc::setGia);

		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public int getLoaidinhmuc() {
		return _loaidinhmuc;
	}

	@Override
	public void setLoaidinhmuc(int loaidinhmuc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_loaidinhmuc = loaidinhmuc;
	}

	@JSON
	@Override
	public String getGia() {
		if (_gia == null) {
			return "";
		}
		else {
			return _gia;
		}
	}

	@Override
	public void setGia(String gia) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gia = gia;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DinhMuc.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DinhMuc toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DinhMuc>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DinhMucImpl dinhMucImpl = new DinhMucImpl();

		dinhMucImpl.setId(getId());
		dinhMucImpl.setLoaidinhmuc(getLoaidinhmuc());
		dinhMucImpl.setGia(getGia());

		dinhMucImpl.resetOriginalValues();

		return dinhMucImpl;
	}

	@Override
	public int compareTo(DinhMuc dinhMuc) {
		long primaryKey = dinhMuc.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DinhMuc)) {
			return false;
		}

		DinhMuc dinhMuc = (DinhMuc)object;

		long primaryKey = dinhMuc.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DinhMuc> toCacheModel() {
		DinhMucCacheModel dinhMucCacheModel = new DinhMucCacheModel();

		dinhMucCacheModel.id = getId();

		dinhMucCacheModel.loaidinhmuc = getLoaidinhmuc();

		dinhMucCacheModel.gia = getGia();

		String gia = dinhMucCacheModel.gia;

		if ((gia != null) && (gia.length() == 0)) {
			dinhMucCacheModel.gia = null;
		}

		return dinhMucCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DinhMuc, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DinhMuc, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DinhMuc, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((DinhMuc)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DinhMuc, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DinhMuc, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DinhMuc, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DinhMuc)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DinhMuc>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DinhMuc.class, ModelWrapper.class);

	}

	private long _id;
	private int _loaidinhmuc;
	private String _gia;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DinhMuc, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DinhMuc)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("loaidinhmuc", _loaidinhmuc);
		_columnOriginalValues.put("gia", _gia);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("loaidinhmuc", 2L);

		columnBitmasks.put("gia", 4L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DinhMuc _escapedModel;

}