/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dnict.tintuc.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import vn.dnict.tintuc.model.News_NguonTin;
import vn.dnict.tintuc.model.News_NguonTinModel;

/**
 * The base model implementation for the News_NguonTin service. Represents a row in the &quot;cw_News_NguonTin&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>News_NguonTinModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link News_NguonTinImpl}.
 * </p>
 *
 * @author dnict
 * @see News_NguonTinImpl
 * @generated
 */
public class News_NguonTinModelImpl
	extends BaseModelImpl<News_NguonTin> implements News_NguonTinModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a news_ nguon tin model instance should use the <code>News_NguonTin</code> interface instead.
	 */
	public static final String TABLE_NAME = "cw_News_NguonTin";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"name", Types.VARCHAR},
		{"status", Types.INTEGER}, {"orders", Types.INTEGER},
		{"delete_status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("orders", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("delete_status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cw_News_NguonTin (id_ LONG not null primary key,companyId LONG,groupId LONG,name STRING null,status INTEGER,orders INTEGER,delete_status INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table cw_News_NguonTin";

	public static final String ORDER_BY_JPQL = " ORDER BY news_NguonTin.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY cw_News_NguonTin.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public News_NguonTinModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return News_NguonTin.class;
	}

	@Override
	public String getModelClassName() {
		return News_NguonTin.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<News_NguonTin, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<News_NguonTin, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<News_NguonTin, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((News_NguonTin)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<News_NguonTin, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<News_NguonTin, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(News_NguonTin)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<News_NguonTin, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<News_NguonTin, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, News_NguonTin>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			News_NguonTin.class.getClassLoader(), News_NguonTin.class,
			ModelWrapper.class);

		try {
			Constructor<News_NguonTin> constructor =
				(Constructor<News_NguonTin>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<News_NguonTin, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<News_NguonTin, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<News_NguonTin, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<News_NguonTin, Object>>();
		Map<String, BiConsumer<News_NguonTin, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<News_NguonTin, ?>>();

		attributeGetterFunctions.put("id", News_NguonTin::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<News_NguonTin, Long>)News_NguonTin::setId);
		attributeGetterFunctions.put("companyId", News_NguonTin::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<News_NguonTin, Long>)News_NguonTin::setCompanyId);
		attributeGetterFunctions.put("groupId", News_NguonTin::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<News_NguonTin, Long>)News_NguonTin::setGroupId);
		attributeGetterFunctions.put("name", News_NguonTin::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<News_NguonTin, String>)News_NguonTin::setName);
		attributeGetterFunctions.put("status", News_NguonTin::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<News_NguonTin, Integer>)News_NguonTin::setStatus);
		attributeGetterFunctions.put("orders", News_NguonTin::getOrders);
		attributeSetterBiConsumers.put(
			"orders",
			(BiConsumer<News_NguonTin, Integer>)News_NguonTin::setOrders);
		attributeGetterFunctions.put(
			"delete_status", News_NguonTin::getDelete_status);
		attributeSetterBiConsumers.put(
			"delete_status",
			(BiConsumer<News_NguonTin, Integer>)
				News_NguonTin::setDelete_status);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public int getOrders() {
		return _orders;
	}

	@Override
	public void setOrders(int orders) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orders = orders;
	}

	@Override
	public int getDelete_status() {
		return _delete_status;
	}

	@Override
	public void setDelete_status(int delete_status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_delete_status = delete_status;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), News_NguonTin.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public News_NguonTin toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, News_NguonTin>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		News_NguonTinImpl news_NguonTinImpl = new News_NguonTinImpl();

		news_NguonTinImpl.setId(getId());
		news_NguonTinImpl.setCompanyId(getCompanyId());
		news_NguonTinImpl.setGroupId(getGroupId());
		news_NguonTinImpl.setName(getName());
		news_NguonTinImpl.setStatus(getStatus());
		news_NguonTinImpl.setOrders(getOrders());
		news_NguonTinImpl.setDelete_status(getDelete_status());

		news_NguonTinImpl.resetOriginalValues();

		return news_NguonTinImpl;
	}

	@Override
	public int compareTo(News_NguonTin news_NguonTin) {
		long primaryKey = news_NguonTin.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof News_NguonTin)) {
			return false;
		}

		News_NguonTin news_NguonTin = (News_NguonTin)object;

		long primaryKey = news_NguonTin.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<News_NguonTin> toCacheModel() {
		News_NguonTinCacheModel news_NguonTinCacheModel =
			new News_NguonTinCacheModel();

		news_NguonTinCacheModel.id = getId();

		news_NguonTinCacheModel.companyId = getCompanyId();

		news_NguonTinCacheModel.groupId = getGroupId();

		news_NguonTinCacheModel.name = getName();

		String name = news_NguonTinCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			news_NguonTinCacheModel.name = null;
		}

		news_NguonTinCacheModel.status = getStatus();

		news_NguonTinCacheModel.orders = getOrders();

		news_NguonTinCacheModel.delete_status = getDelete_status();

		return news_NguonTinCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<News_NguonTin, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<News_NguonTin, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<News_NguonTin, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((News_NguonTin)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<News_NguonTin, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<News_NguonTin, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<News_NguonTin, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((News_NguonTin)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, News_NguonTin>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _id;
	private long _companyId;
	private long _groupId;
	private String _name;
	private int _status;
	private int _orders;
	private int _delete_status;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<News_NguonTin, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((News_NguonTin)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("orders", _orders);
		_columnOriginalValues.put("delete_status", _delete_status);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("companyId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("name", 8L);

		columnBitmasks.put("status", 16L);

		columnBitmasks.put("orders", 32L);

		columnBitmasks.put("delete_status", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private News_NguonTin _escapedModel;

}