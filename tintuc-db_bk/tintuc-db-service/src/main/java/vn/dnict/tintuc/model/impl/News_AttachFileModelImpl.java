/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dnict.tintuc.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import vn.dnict.tintuc.model.News_AttachFile;
import vn.dnict.tintuc.model.News_AttachFileModel;

/**
 * The base model implementation for the News_AttachFile service. Represents a row in the &quot;cw_News_AttachFile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>News_AttachFileModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link News_AttachFileImpl}.
 * </p>
 *
 * @author dnict
 * @see News_AttachFileImpl
 * @generated
 */
public class News_AttachFileModelImpl
	extends BaseModelImpl<News_AttachFile> implements News_AttachFileModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a news_ attach file model instance should use the <code>News_AttachFile</code> interface instead.
	 */
	public static final String TABLE_NAME = "cw_News_AttachFile";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"ten", Types.VARCHAR}, {"url", Types.VARCHAR},
		{"Object", Types.BIGINT}, {"ObjectId", Types.BIGINT},
		{"ghichu", Types.VARCHAR}, {"daxoa", Types.INTEGER},
		{"trangthai", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ten", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Object", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ObjectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ghichu", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("daxoa", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("trangthai", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cw_News_AttachFile (id_ LONG not null primary key,companyId LONG,groupId LONG,userId LONG,ten STRING null,url TEXT null,Object LONG,ObjectId LONG,ghichu STRING null,daxoa INTEGER,trangthai INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table cw_News_AttachFile";

	public static final String ORDER_BY_JPQL =
		" ORDER BY news_AttachFile.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY cw_News_AttachFile.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public News_AttachFileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return News_AttachFile.class;
	}

	@Override
	public String getModelClassName() {
		return News_AttachFile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<News_AttachFile, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<News_AttachFile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<News_AttachFile, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((News_AttachFile)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<News_AttachFile, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<News_AttachFile, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(News_AttachFile)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<News_AttachFile, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<News_AttachFile, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, News_AttachFile>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			News_AttachFile.class.getClassLoader(), News_AttachFile.class,
			ModelWrapper.class);

		try {
			Constructor<News_AttachFile> constructor =
				(Constructor<News_AttachFile>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<News_AttachFile, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<News_AttachFile, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<News_AttachFile, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<News_AttachFile, Object>>();
		Map<String, BiConsumer<News_AttachFile, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<News_AttachFile, ?>>();

		attributeGetterFunctions.put("id", News_AttachFile::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<News_AttachFile, Long>)News_AttachFile::setId);
		attributeGetterFunctions.put(
			"companyId", News_AttachFile::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<News_AttachFile, Long>)News_AttachFile::setCompanyId);
		attributeGetterFunctions.put("groupId", News_AttachFile::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<News_AttachFile, Long>)News_AttachFile::setGroupId);
		attributeGetterFunctions.put("userId", News_AttachFile::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<News_AttachFile, Long>)News_AttachFile::setUserId);
		attributeGetterFunctions.put("ten", News_AttachFile::getTen);
		attributeSetterBiConsumers.put(
			"ten",
			(BiConsumer<News_AttachFile, String>)News_AttachFile::setTen);
		attributeGetterFunctions.put("url", News_AttachFile::getUrl);
		attributeSetterBiConsumers.put(
			"url",
			(BiConsumer<News_AttachFile, String>)News_AttachFile::setUrl);
		attributeGetterFunctions.put("Object", News_AttachFile::getObject);
		attributeSetterBiConsumers.put(
			"Object",
			(BiConsumer<News_AttachFile, Long>)News_AttachFile::setObject);
		attributeGetterFunctions.put("ObjectId", News_AttachFile::getObjectId);
		attributeSetterBiConsumers.put(
			"ObjectId",
			(BiConsumer<News_AttachFile, Long>)News_AttachFile::setObjectId);
		attributeGetterFunctions.put("ghichu", News_AttachFile::getGhichu);
		attributeSetterBiConsumers.put(
			"ghichu",
			(BiConsumer<News_AttachFile, String>)News_AttachFile::setGhichu);
		attributeGetterFunctions.put("daxoa", News_AttachFile::getDaxoa);
		attributeSetterBiConsumers.put(
			"daxoa",
			(BiConsumer<News_AttachFile, Integer>)News_AttachFile::setDaxoa);
		attributeGetterFunctions.put(
			"trangthai", News_AttachFile::getTrangthai);
		attributeSetterBiConsumers.put(
			"trangthai",
			(BiConsumer<News_AttachFile, Integer>)
				News_AttachFile::setTrangthai);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getTen() {
		if (_ten == null) {
			return "";
		}
		else {
			return _ten;
		}
	}

	@Override
	public void setTen(String ten) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ten = ten;
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return "";
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_url = url;
	}

	@Override
	public long getObject() {
		return _Object;
	}

	@Override
	public void setObject(long Object) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Object = Object;
	}

	@Override
	public long getObjectId() {
		return _ObjectId;
	}

	@Override
	public void setObjectId(long ObjectId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ObjectId = ObjectId;
	}

	@Override
	public String getGhichu() {
		if (_ghichu == null) {
			return "";
		}
		else {
			return _ghichu;
		}
	}

	@Override
	public void setGhichu(String ghichu) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ghichu = ghichu;
	}

	@Override
	public int getDaxoa() {
		return _daxoa;
	}

	@Override
	public void setDaxoa(int daxoa) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_daxoa = daxoa;
	}

	@Override
	public int getTrangthai() {
		return _trangthai;
	}

	@Override
	public void setTrangthai(int trangthai) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trangthai = trangthai;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), News_AttachFile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public News_AttachFile toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, News_AttachFile>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		News_AttachFileImpl news_AttachFileImpl = new News_AttachFileImpl();

		news_AttachFileImpl.setId(getId());
		news_AttachFileImpl.setCompanyId(getCompanyId());
		news_AttachFileImpl.setGroupId(getGroupId());
		news_AttachFileImpl.setUserId(getUserId());
		news_AttachFileImpl.setTen(getTen());
		news_AttachFileImpl.setUrl(getUrl());
		news_AttachFileImpl.setObject(getObject());
		news_AttachFileImpl.setObjectId(getObjectId());
		news_AttachFileImpl.setGhichu(getGhichu());
		news_AttachFileImpl.setDaxoa(getDaxoa());
		news_AttachFileImpl.setTrangthai(getTrangthai());

		news_AttachFileImpl.resetOriginalValues();

		return news_AttachFileImpl;
	}

	@Override
	public int compareTo(News_AttachFile news_AttachFile) {
		long primaryKey = news_AttachFile.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof News_AttachFile)) {
			return false;
		}

		News_AttachFile news_AttachFile = (News_AttachFile)object;

		long primaryKey = news_AttachFile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<News_AttachFile> toCacheModel() {
		News_AttachFileCacheModel news_AttachFileCacheModel =
			new News_AttachFileCacheModel();

		news_AttachFileCacheModel.id = getId();

		news_AttachFileCacheModel.companyId = getCompanyId();

		news_AttachFileCacheModel.groupId = getGroupId();

		news_AttachFileCacheModel.userId = getUserId();

		news_AttachFileCacheModel.ten = getTen();

		String ten = news_AttachFileCacheModel.ten;

		if ((ten != null) && (ten.length() == 0)) {
			news_AttachFileCacheModel.ten = null;
		}

		news_AttachFileCacheModel.url = getUrl();

		String url = news_AttachFileCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			news_AttachFileCacheModel.url = null;
		}

		news_AttachFileCacheModel.Object = getObject();

		news_AttachFileCacheModel.ObjectId = getObjectId();

		news_AttachFileCacheModel.ghichu = getGhichu();

		String ghichu = news_AttachFileCacheModel.ghichu;

		if ((ghichu != null) && (ghichu.length() == 0)) {
			news_AttachFileCacheModel.ghichu = null;
		}

		news_AttachFileCacheModel.daxoa = getDaxoa();

		news_AttachFileCacheModel.trangthai = getTrangthai();

		return news_AttachFileCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<News_AttachFile, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<News_AttachFile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<News_AttachFile, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((News_AttachFile)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<News_AttachFile, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<News_AttachFile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<News_AttachFile, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((News_AttachFile)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, News_AttachFile>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _id;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private String _ten;
	private String _url;
	private long _Object;
	private long _ObjectId;
	private String _ghichu;
	private int _daxoa;
	private int _trangthai;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<News_AttachFile, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((News_AttachFile)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("ten", _ten);
		_columnOriginalValues.put("url", _url);
		_columnOriginalValues.put("Object", _Object);
		_columnOriginalValues.put("ObjectId", _ObjectId);
		_columnOriginalValues.put("ghichu", _ghichu);
		_columnOriginalValues.put("daxoa", _daxoa);
		_columnOriginalValues.put("trangthai", _trangthai);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("companyId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("ten", 16L);

		columnBitmasks.put("url", 32L);

		columnBitmasks.put("Object", 64L);

		columnBitmasks.put("ObjectId", 128L);

		columnBitmasks.put("ghichu", 256L);

		columnBitmasks.put("daxoa", 512L);

		columnBitmasks.put("trangthai", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private News_AttachFile _escapedModel;

}