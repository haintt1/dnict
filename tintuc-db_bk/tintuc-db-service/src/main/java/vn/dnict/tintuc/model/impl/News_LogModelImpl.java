/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dnict.tintuc.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import vn.dnict.tintuc.model.News_Log;
import vn.dnict.tintuc.model.News_LogModel;

/**
 * The base model implementation for the News_Log service. Represents a row in the &quot;cw_News_Log&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>News_LogModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link News_LogImpl}.
 * </p>
 *
 * @author dnict
 * @see News_LogImpl
 * @generated
 */
public class News_LogModelImpl
	extends BaseModelImpl<News_Log> implements News_LogModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a news_ log model instance should use the <code>News_Log</code> interface instead.
	 */
	public static final String TABLE_NAME = "cw_News_Log";

	public static final Object[][] TABLE_COLUMNS = {
		{"companyId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"id_", Types.BIGINT}, {"typeid", Types.BIGINT},
		{"idnewactivity", Types.BIGINT}, {"title", Types.CLOB},
		{"info", Types.VARCHAR}, {"content", Types.CLOB},
		{"createdby", Types.BIGINT}, {"createdtime", Types.TIMESTAMP},
		{"modifiedby", Types.BIGINT}, {"modifiedtime", Types.TIMESTAMP},
		{"nguoinhanid", Types.BIGINT}, {"nguoixulyid", Types.BIGINT},
		{"ngayxuly", Types.TIMESTAMP}, {"status", Types.INTEGER},
		{"language", Types.VARCHAR}, {"version", Types.BIGINT},
		{"urlimagesmall", Types.VARCHAR}, {"luotxem", Types.BIGINT},
		{"isnoibat", Types.BIGINT}, {"articleid", Types.BIGINT},
		{"noidungxuly", Types.CLOB}, {"ngayxuatban", Types.TIMESTAMP},
		{"ngayketthuc", Types.TIMESTAMP}, {"ishethang", Types.BIGINT},
		{"nguontin", Types.BIGINT}, {"congtacvien", Types.VARCHAR},
		{"loaitintuc", Types.INTEGER}, {"tukhoa", Types.VARCHAR},
		{"sotinanh", Types.INTEGER}, {"isformbinhluan", Types.INTEGER},
		{"isviewbinhluan", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("typeid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idnewactivity", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.CLOB);
		TABLE_COLUMNS_MAP.put("info", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.CLOB);
		TABLE_COLUMNS_MAP.put("createdby", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdtime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedby", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedtime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nguoinhanid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nguoixulyid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ngayxuly", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("version", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("urlimagesmall", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("luotxem", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isnoibat", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("articleid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("noidungxuly", Types.CLOB);
		TABLE_COLUMNS_MAP.put("ngayxuatban", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ngayketthuc", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ishethang", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nguontin", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("congtacvien", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("loaitintuc", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("tukhoa", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sotinanh", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("isformbinhluan", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("isviewbinhluan", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cw_News_Log (companyId LONG,groupId LONG,id_ LONG not null primary key,typeid LONG,idnewactivity LONG,title TEXT null,info STRING null,content TEXT null,createdby LONG,createdtime DATE null,modifiedby LONG,modifiedtime DATE null,nguoinhanid LONG,nguoixulyid LONG,ngayxuly DATE null,status INTEGER,language VARCHAR(75) null,version LONG,urlimagesmall TEXT null,luotxem LONG,isnoibat LONG,articleid LONG,noidungxuly TEXT null,ngayxuatban DATE null,ngayketthuc DATE null,ishethang LONG,nguontin LONG,congtacvien STRING null,loaitintuc INTEGER,tukhoa VARCHAR(75) null,sotinanh INTEGER,isformbinhluan INTEGER,isviewbinhluan INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table cw_News_Log";

	public static final String ORDER_BY_JPQL = " ORDER BY news_Log.id DESC";

	public static final String ORDER_BY_SQL = " ORDER BY cw_News_Log.id_ DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public News_LogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return News_Log.class;
	}

	@Override
	public String getModelClassName() {
		return News_Log.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<News_Log, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<News_Log, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<News_Log, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((News_Log)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<News_Log, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<News_Log, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(News_Log)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<News_Log, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<News_Log, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, News_Log>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			News_Log.class.getClassLoader(), News_Log.class,
			ModelWrapper.class);

		try {
			Constructor<News_Log> constructor =
				(Constructor<News_Log>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<News_Log, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<News_Log, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<News_Log, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<News_Log, Object>>();
		Map<String, BiConsumer<News_Log, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<News_Log, ?>>();

		attributeGetterFunctions.put("companyId", News_Log::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<News_Log, Long>)News_Log::setCompanyId);
		attributeGetterFunctions.put("groupId", News_Log::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<News_Log, Long>)News_Log::setGroupId);
		attributeGetterFunctions.put("id", News_Log::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<News_Log, Long>)News_Log::setId);
		attributeGetterFunctions.put("typeid", News_Log::getTypeid);
		attributeSetterBiConsumers.put(
			"typeid", (BiConsumer<News_Log, Long>)News_Log::setTypeid);
		attributeGetterFunctions.put(
			"idnewactivity", News_Log::getIdnewactivity);
		attributeSetterBiConsumers.put(
			"idnewactivity",
			(BiConsumer<News_Log, Long>)News_Log::setIdnewactivity);
		attributeGetterFunctions.put("title", News_Log::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<News_Log, String>)News_Log::setTitle);
		attributeGetterFunctions.put("info", News_Log::getInfo);
		attributeSetterBiConsumers.put(
			"info", (BiConsumer<News_Log, String>)News_Log::setInfo);
		attributeGetterFunctions.put("content", News_Log::getContent);
		attributeSetterBiConsumers.put(
			"content", (BiConsumer<News_Log, String>)News_Log::setContent);
		attributeGetterFunctions.put("createdby", News_Log::getCreatedby);
		attributeSetterBiConsumers.put(
			"createdby", (BiConsumer<News_Log, Long>)News_Log::setCreatedby);
		attributeGetterFunctions.put("createdtime", News_Log::getCreatedtime);
		attributeSetterBiConsumers.put(
			"createdtime",
			(BiConsumer<News_Log, Date>)News_Log::setCreatedtime);
		attributeGetterFunctions.put("modifiedby", News_Log::getModifiedby);
		attributeSetterBiConsumers.put(
			"modifiedby", (BiConsumer<News_Log, Long>)News_Log::setModifiedby);
		attributeGetterFunctions.put("modifiedtime", News_Log::getModifiedtime);
		attributeSetterBiConsumers.put(
			"modifiedtime",
			(BiConsumer<News_Log, Date>)News_Log::setModifiedtime);
		attributeGetterFunctions.put("nguoinhanid", News_Log::getNguoinhanid);
		attributeSetterBiConsumers.put(
			"nguoinhanid",
			(BiConsumer<News_Log, Long>)News_Log::setNguoinhanid);
		attributeGetterFunctions.put("nguoixulyid", News_Log::getNguoixulyid);
		attributeSetterBiConsumers.put(
			"nguoixulyid",
			(BiConsumer<News_Log, Long>)News_Log::setNguoixulyid);
		attributeGetterFunctions.put("ngayxuly", News_Log::getNgayxuly);
		attributeSetterBiConsumers.put(
			"ngayxuly", (BiConsumer<News_Log, Date>)News_Log::setNgayxuly);
		attributeGetterFunctions.put("status", News_Log::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<News_Log, Integer>)News_Log::setStatus);
		attributeGetterFunctions.put("language", News_Log::getLanguage);
		attributeSetterBiConsumers.put(
			"language", (BiConsumer<News_Log, String>)News_Log::setLanguage);
		attributeGetterFunctions.put("version", News_Log::getVersion);
		attributeSetterBiConsumers.put(
			"version", (BiConsumer<News_Log, Long>)News_Log::setVersion);
		attributeGetterFunctions.put(
			"urlimagesmall", News_Log::getUrlimagesmall);
		attributeSetterBiConsumers.put(
			"urlimagesmall",
			(BiConsumer<News_Log, String>)News_Log::setUrlimagesmall);
		attributeGetterFunctions.put("luotxem", News_Log::getLuotxem);
		attributeSetterBiConsumers.put(
			"luotxem", (BiConsumer<News_Log, Long>)News_Log::setLuotxem);
		attributeGetterFunctions.put("isnoibat", News_Log::getIsnoibat);
		attributeSetterBiConsumers.put(
			"isnoibat", (BiConsumer<News_Log, Long>)News_Log::setIsnoibat);
		attributeGetterFunctions.put("articleid", News_Log::getArticleid);
		attributeSetterBiConsumers.put(
			"articleid", (BiConsumer<News_Log, Long>)News_Log::setArticleid);
		attributeGetterFunctions.put("noidungxuly", News_Log::getNoidungxuly);
		attributeSetterBiConsumers.put(
			"noidungxuly",
			(BiConsumer<News_Log, String>)News_Log::setNoidungxuly);
		attributeGetterFunctions.put("ngayxuatban", News_Log::getNgayxuatban);
		attributeSetterBiConsumers.put(
			"ngayxuatban",
			(BiConsumer<News_Log, Date>)News_Log::setNgayxuatban);
		attributeGetterFunctions.put("ngayketthuc", News_Log::getNgayketthuc);
		attributeSetterBiConsumers.put(
			"ngayketthuc",
			(BiConsumer<News_Log, Date>)News_Log::setNgayketthuc);
		attributeGetterFunctions.put("ishethang", News_Log::getIshethang);
		attributeSetterBiConsumers.put(
			"ishethang", (BiConsumer<News_Log, Long>)News_Log::setIshethang);
		attributeGetterFunctions.put("nguontin", News_Log::getNguontin);
		attributeSetterBiConsumers.put(
			"nguontin", (BiConsumer<News_Log, Long>)News_Log::setNguontin);
		attributeGetterFunctions.put("congtacvien", News_Log::getCongtacvien);
		attributeSetterBiConsumers.put(
			"congtacvien",
			(BiConsumer<News_Log, String>)News_Log::setCongtacvien);
		attributeGetterFunctions.put("loaitintuc", News_Log::getLoaitintuc);
		attributeSetterBiConsumers.put(
			"loaitintuc",
			(BiConsumer<News_Log, Integer>)News_Log::setLoaitintuc);
		attributeGetterFunctions.put("tukhoa", News_Log::getTukhoa);
		attributeSetterBiConsumers.put(
			"tukhoa", (BiConsumer<News_Log, String>)News_Log::setTukhoa);
		attributeGetterFunctions.put("sotinanh", News_Log::getSotinanh);
		attributeSetterBiConsumers.put(
			"sotinanh", (BiConsumer<News_Log, Integer>)News_Log::setSotinanh);
		attributeGetterFunctions.put(
			"isformbinhluan", News_Log::getIsformbinhluan);
		attributeSetterBiConsumers.put(
			"isformbinhluan",
			(BiConsumer<News_Log, Integer>)News_Log::setIsformbinhluan);
		attributeGetterFunctions.put(
			"isviewbinhluan", News_Log::getIsviewbinhluan);
		attributeSetterBiConsumers.put(
			"isviewbinhluan",
			(BiConsumer<News_Log, Integer>)News_Log::setIsviewbinhluan);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public long getTypeid() {
		return _typeid;
	}

	@Override
	public void setTypeid(long typeid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeid = typeid;
	}

	@Override
	public long getIdnewactivity() {
		return _idnewactivity;
	}

	@Override
	public void setIdnewactivity(long idnewactivity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idnewactivity = idnewactivity;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@Override
	public String getInfo() {
		if (_info == null) {
			return "";
		}
		else {
			return _info;
		}
	}

	@Override
	public void setInfo(String info) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_info = info;
	}

	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_content = content;
	}

	@Override
	public long getCreatedby() {
		return _createdby;
	}

	@Override
	public void setCreatedby(long createdby) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdby = createdby;
	}

	@Override
	public Date getCreatedtime() {
		return _createdtime;
	}

	@Override
	public void setCreatedtime(Date createdtime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdtime = createdtime;
	}

	@Override
	public long getModifiedby() {
		return _modifiedby;
	}

	@Override
	public void setModifiedby(long modifiedby) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedby = modifiedby;
	}

	@Override
	public Date getModifiedtime() {
		return _modifiedtime;
	}

	@Override
	public void setModifiedtime(Date modifiedtime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedtime = modifiedtime;
	}

	@Override
	public long getNguoinhanid() {
		return _nguoinhanid;
	}

	@Override
	public void setNguoinhanid(long nguoinhanid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nguoinhanid = nguoinhanid;
	}

	@Override
	public long getNguoixulyid() {
		return _nguoixulyid;
	}

	@Override
	public void setNguoixulyid(long nguoixulyid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nguoixulyid = nguoixulyid;
	}

	@Override
	public Date getNgayxuly() {
		return _ngayxuly;
	}

	@Override
	public void setNgayxuly(Date ngayxuly) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngayxuly = ngayxuly;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public String getLanguage() {
		if (_language == null) {
			return "";
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_language = language;
	}

	@Override
	public long getVersion() {
		return _version;
	}

	@Override
	public void setVersion(long version) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_version = version;
	}

	@Override
	public String getUrlimagesmall() {
		if (_urlimagesmall == null) {
			return "";
		}
		else {
			return _urlimagesmall;
		}
	}

	@Override
	public void setUrlimagesmall(String urlimagesmall) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_urlimagesmall = urlimagesmall;
	}

	@Override
	public long getLuotxem() {
		return _luotxem;
	}

	@Override
	public void setLuotxem(long luotxem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_luotxem = luotxem;
	}

	@Override
	public long getIsnoibat() {
		return _isnoibat;
	}

	@Override
	public void setIsnoibat(long isnoibat) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isnoibat = isnoibat;
	}

	@Override
	public long getArticleid() {
		return _articleid;
	}

	@Override
	public void setArticleid(long articleid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_articleid = articleid;
	}

	@Override
	public String getNoidungxuly() {
		if (_noidungxuly == null) {
			return "";
		}
		else {
			return _noidungxuly;
		}
	}

	@Override
	public void setNoidungxuly(String noidungxuly) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noidungxuly = noidungxuly;
	}

	@Override
	public Date getNgayxuatban() {
		return _ngayxuatban;
	}

	@Override
	public void setNgayxuatban(Date ngayxuatban) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngayxuatban = ngayxuatban;
	}

	@Override
	public Date getNgayketthuc() {
		return _ngayketthuc;
	}

	@Override
	public void setNgayketthuc(Date ngayketthuc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngayketthuc = ngayketthuc;
	}

	@Override
	public long getIshethang() {
		return _ishethang;
	}

	@Override
	public void setIshethang(long ishethang) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ishethang = ishethang;
	}

	@Override
	public long getNguontin() {
		return _nguontin;
	}

	@Override
	public void setNguontin(long nguontin) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nguontin = nguontin;
	}

	@Override
	public String getCongtacvien() {
		if (_congtacvien == null) {
			return "";
		}
		else {
			return _congtacvien;
		}
	}

	@Override
	public void setCongtacvien(String congtacvien) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_congtacvien = congtacvien;
	}

	@Override
	public int getLoaitintuc() {
		return _loaitintuc;
	}

	@Override
	public void setLoaitintuc(int loaitintuc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_loaitintuc = loaitintuc;
	}

	@Override
	public String getTukhoa() {
		if (_tukhoa == null) {
			return "";
		}
		else {
			return _tukhoa;
		}
	}

	@Override
	public void setTukhoa(String tukhoa) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tukhoa = tukhoa;
	}

	@Override
	public int getSotinanh() {
		return _sotinanh;
	}

	@Override
	public void setSotinanh(int sotinanh) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sotinanh = sotinanh;
	}

	@Override
	public int getIsformbinhluan() {
		return _isformbinhluan;
	}

	@Override
	public void setIsformbinhluan(int isformbinhluan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isformbinhluan = isformbinhluan;
	}

	@Override
	public int getIsviewbinhluan() {
		return _isviewbinhluan;
	}

	@Override
	public void setIsviewbinhluan(int isviewbinhluan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isviewbinhluan = isviewbinhluan;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), News_Log.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public News_Log toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, News_Log>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		News_LogImpl news_LogImpl = new News_LogImpl();

		news_LogImpl.setCompanyId(getCompanyId());
		news_LogImpl.setGroupId(getGroupId());
		news_LogImpl.setId(getId());
		news_LogImpl.setTypeid(getTypeid());
		news_LogImpl.setIdnewactivity(getIdnewactivity());
		news_LogImpl.setTitle(getTitle());
		news_LogImpl.setInfo(getInfo());
		news_LogImpl.setContent(getContent());
		news_LogImpl.setCreatedby(getCreatedby());
		news_LogImpl.setCreatedtime(getCreatedtime());
		news_LogImpl.setModifiedby(getModifiedby());
		news_LogImpl.setModifiedtime(getModifiedtime());
		news_LogImpl.setNguoinhanid(getNguoinhanid());
		news_LogImpl.setNguoixulyid(getNguoixulyid());
		news_LogImpl.setNgayxuly(getNgayxuly());
		news_LogImpl.setStatus(getStatus());
		news_LogImpl.setLanguage(getLanguage());
		news_LogImpl.setVersion(getVersion());
		news_LogImpl.setUrlimagesmall(getUrlimagesmall());
		news_LogImpl.setLuotxem(getLuotxem());
		news_LogImpl.setIsnoibat(getIsnoibat());
		news_LogImpl.setArticleid(getArticleid());
		news_LogImpl.setNoidungxuly(getNoidungxuly());
		news_LogImpl.setNgayxuatban(getNgayxuatban());
		news_LogImpl.setNgayketthuc(getNgayketthuc());
		news_LogImpl.setIshethang(getIshethang());
		news_LogImpl.setNguontin(getNguontin());
		news_LogImpl.setCongtacvien(getCongtacvien());
		news_LogImpl.setLoaitintuc(getLoaitintuc());
		news_LogImpl.setTukhoa(getTukhoa());
		news_LogImpl.setSotinanh(getSotinanh());
		news_LogImpl.setIsformbinhluan(getIsformbinhluan());
		news_LogImpl.setIsviewbinhluan(getIsviewbinhluan());

		news_LogImpl.resetOriginalValues();

		return news_LogImpl;
	}

	@Override
	public int compareTo(News_Log news_Log) {
		int value = 0;

		if (getId() < news_Log.getId()) {
			value = -1;
		}
		else if (getId() > news_Log.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof News_Log)) {
			return false;
		}

		News_Log news_Log = (News_Log)object;

		long primaryKey = news_Log.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<News_Log> toCacheModel() {
		News_LogCacheModel news_LogCacheModel = new News_LogCacheModel();

		news_LogCacheModel.companyId = getCompanyId();

		news_LogCacheModel.groupId = getGroupId();

		news_LogCacheModel.id = getId();

		news_LogCacheModel.typeid = getTypeid();

		news_LogCacheModel.idnewactivity = getIdnewactivity();

		news_LogCacheModel.title = getTitle();

		String title = news_LogCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			news_LogCacheModel.title = null;
		}

		news_LogCacheModel.info = getInfo();

		String info = news_LogCacheModel.info;

		if ((info != null) && (info.length() == 0)) {
			news_LogCacheModel.info = null;
		}

		news_LogCacheModel.content = getContent();

		String content = news_LogCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			news_LogCacheModel.content = null;
		}

		news_LogCacheModel.createdby = getCreatedby();

		Date createdtime = getCreatedtime();

		if (createdtime != null) {
			news_LogCacheModel.createdtime = createdtime.getTime();
		}
		else {
			news_LogCacheModel.createdtime = Long.MIN_VALUE;
		}

		news_LogCacheModel.modifiedby = getModifiedby();

		Date modifiedtime = getModifiedtime();

		if (modifiedtime != null) {
			news_LogCacheModel.modifiedtime = modifiedtime.getTime();
		}
		else {
			news_LogCacheModel.modifiedtime = Long.MIN_VALUE;
		}

		news_LogCacheModel.nguoinhanid = getNguoinhanid();

		news_LogCacheModel.nguoixulyid = getNguoixulyid();

		Date ngayxuly = getNgayxuly();

		if (ngayxuly != null) {
			news_LogCacheModel.ngayxuly = ngayxuly.getTime();
		}
		else {
			news_LogCacheModel.ngayxuly = Long.MIN_VALUE;
		}

		news_LogCacheModel.status = getStatus();

		news_LogCacheModel.language = getLanguage();

		String language = news_LogCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			news_LogCacheModel.language = null;
		}

		news_LogCacheModel.version = getVersion();

		news_LogCacheModel.urlimagesmall = getUrlimagesmall();

		String urlimagesmall = news_LogCacheModel.urlimagesmall;

		if ((urlimagesmall != null) && (urlimagesmall.length() == 0)) {
			news_LogCacheModel.urlimagesmall = null;
		}

		news_LogCacheModel.luotxem = getLuotxem();

		news_LogCacheModel.isnoibat = getIsnoibat();

		news_LogCacheModel.articleid = getArticleid();

		news_LogCacheModel.noidungxuly = getNoidungxuly();

		String noidungxuly = news_LogCacheModel.noidungxuly;

		if ((noidungxuly != null) && (noidungxuly.length() == 0)) {
			news_LogCacheModel.noidungxuly = null;
		}

		Date ngayxuatban = getNgayxuatban();

		if (ngayxuatban != null) {
			news_LogCacheModel.ngayxuatban = ngayxuatban.getTime();
		}
		else {
			news_LogCacheModel.ngayxuatban = Long.MIN_VALUE;
		}

		Date ngayketthuc = getNgayketthuc();

		if (ngayketthuc != null) {
			news_LogCacheModel.ngayketthuc = ngayketthuc.getTime();
		}
		else {
			news_LogCacheModel.ngayketthuc = Long.MIN_VALUE;
		}

		news_LogCacheModel.ishethang = getIshethang();

		news_LogCacheModel.nguontin = getNguontin();

		news_LogCacheModel.congtacvien = getCongtacvien();

		String congtacvien = news_LogCacheModel.congtacvien;

		if ((congtacvien != null) && (congtacvien.length() == 0)) {
			news_LogCacheModel.congtacvien = null;
		}

		news_LogCacheModel.loaitintuc = getLoaitintuc();

		news_LogCacheModel.tukhoa = getTukhoa();

		String tukhoa = news_LogCacheModel.tukhoa;

		if ((tukhoa != null) && (tukhoa.length() == 0)) {
			news_LogCacheModel.tukhoa = null;
		}

		news_LogCacheModel.sotinanh = getSotinanh();

		news_LogCacheModel.isformbinhluan = getIsformbinhluan();

		news_LogCacheModel.isviewbinhluan = getIsviewbinhluan();

		return news_LogCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<News_Log, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<News_Log, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<News_Log, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((News_Log)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<News_Log, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<News_Log, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<News_Log, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((News_Log)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, News_Log>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _companyId;
	private long _groupId;
	private long _id;
	private long _typeid;
	private long _idnewactivity;
	private String _title;
	private String _info;
	private String _content;
	private long _createdby;
	private Date _createdtime;
	private long _modifiedby;
	private Date _modifiedtime;
	private long _nguoinhanid;
	private long _nguoixulyid;
	private Date _ngayxuly;
	private int _status;
	private String _language;
	private long _version;
	private String _urlimagesmall;
	private long _luotxem;
	private long _isnoibat;
	private long _articleid;
	private String _noidungxuly;
	private Date _ngayxuatban;
	private Date _ngayketthuc;
	private long _ishethang;
	private long _nguontin;
	private String _congtacvien;
	private int _loaitintuc;
	private String _tukhoa;
	private int _sotinanh;
	private int _isformbinhluan;
	private int _isviewbinhluan;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<News_Log, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((News_Log)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("typeid", _typeid);
		_columnOriginalValues.put("idnewactivity", _idnewactivity);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("info", _info);
		_columnOriginalValues.put("content", _content);
		_columnOriginalValues.put("createdby", _createdby);
		_columnOriginalValues.put("createdtime", _createdtime);
		_columnOriginalValues.put("modifiedby", _modifiedby);
		_columnOriginalValues.put("modifiedtime", _modifiedtime);
		_columnOriginalValues.put("nguoinhanid", _nguoinhanid);
		_columnOriginalValues.put("nguoixulyid", _nguoixulyid);
		_columnOriginalValues.put("ngayxuly", _ngayxuly);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("language", _language);
		_columnOriginalValues.put("version", _version);
		_columnOriginalValues.put("urlimagesmall", _urlimagesmall);
		_columnOriginalValues.put("luotxem", _luotxem);
		_columnOriginalValues.put("isnoibat", _isnoibat);
		_columnOriginalValues.put("articleid", _articleid);
		_columnOriginalValues.put("noidungxuly", _noidungxuly);
		_columnOriginalValues.put("ngayxuatban", _ngayxuatban);
		_columnOriginalValues.put("ngayketthuc", _ngayketthuc);
		_columnOriginalValues.put("ishethang", _ishethang);
		_columnOriginalValues.put("nguontin", _nguontin);
		_columnOriginalValues.put("congtacvien", _congtacvien);
		_columnOriginalValues.put("loaitintuc", _loaitintuc);
		_columnOriginalValues.put("tukhoa", _tukhoa);
		_columnOriginalValues.put("sotinanh", _sotinanh);
		_columnOriginalValues.put("isformbinhluan", _isformbinhluan);
		_columnOriginalValues.put("isviewbinhluan", _isviewbinhluan);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("companyId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("id_", 4L);

		columnBitmasks.put("typeid", 8L);

		columnBitmasks.put("idnewactivity", 16L);

		columnBitmasks.put("title", 32L);

		columnBitmasks.put("info", 64L);

		columnBitmasks.put("content", 128L);

		columnBitmasks.put("createdby", 256L);

		columnBitmasks.put("createdtime", 512L);

		columnBitmasks.put("modifiedby", 1024L);

		columnBitmasks.put("modifiedtime", 2048L);

		columnBitmasks.put("nguoinhanid", 4096L);

		columnBitmasks.put("nguoixulyid", 8192L);

		columnBitmasks.put("ngayxuly", 16384L);

		columnBitmasks.put("status", 32768L);

		columnBitmasks.put("language", 65536L);

		columnBitmasks.put("version", 131072L);

		columnBitmasks.put("urlimagesmall", 262144L);

		columnBitmasks.put("luotxem", 524288L);

		columnBitmasks.put("isnoibat", 1048576L);

		columnBitmasks.put("articleid", 2097152L);

		columnBitmasks.put("noidungxuly", 4194304L);

		columnBitmasks.put("ngayxuatban", 8388608L);

		columnBitmasks.put("ngayketthuc", 16777216L);

		columnBitmasks.put("ishethang", 33554432L);

		columnBitmasks.put("nguontin", 67108864L);

		columnBitmasks.put("congtacvien", 134217728L);

		columnBitmasks.put("loaitintuc", 268435456L);

		columnBitmasks.put("tukhoa", 536870912L);

		columnBitmasks.put("sotinanh", 1073741824L);

		columnBitmasks.put("isformbinhluan", 2147483648L);

		columnBitmasks.put("isviewbinhluan", 4294967296L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private News_Log _escapedModel;

}