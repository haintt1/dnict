/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package vn.dnict.qlquangcao.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import vn.dnict.qlquangcao.model.BangQuangCao;
import vn.dnict.qlquangcao.model.BangQuangCaoModel;
import vn.dnict.qlquangcao.model.BangQuangCaoSoap;

/**
 * The base model implementation for the BangQuangCao service. Represents a row in the &quot;cw_quangcao_banner&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BangQuangCaoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BangQuangCaoImpl}.
 * </p>
 *
 * @author dnict
 * @see BangQuangCaoImpl
 * @generated
 */
@JSON(strict = true)
public class BangQuangCaoModelImpl
	extends BaseModelImpl<BangQuangCao> implements BangQuangCaoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bang quang cao model instance should use the <code>BangQuangCao</code> interface instead.
	 */
	public static final String TABLE_NAME = "cw_quangcao_banner";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"nguoitao", Types.BIGINT},
		{"ten", Types.VARCHAR}, {"duongdan", Types.VARCHAR},
		{"lienket", Types.VARCHAR}, {"nhomKH", Types.BIGINT},
		{"vitriQC", Types.BIGINT}, {"ngaytao", Types.TIMESTAMP},
		{"ngayketthuc", Types.TIMESTAMP}, {"daxoa", Types.INTEGER},
		{"trangthai", Types.INTEGER}, {"trangthaisudung", Types.INTEGER},
		{"ngaysua", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nguoitao", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ten", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("duongdan", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lienket", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nhomKH", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("vitriQC", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ngaytao", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ngayketthuc", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("daxoa", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("trangthai", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("trangthaisudung", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ngaysua", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cw_quangcao_banner (id_ LONG not null primary key,companyId LONG,groupId LONG,nguoitao LONG,ten VARCHAR(75) null,duongdan VARCHAR(75) null,lienket VARCHAR(75) null,nhomKH LONG,vitriQC LONG,ngaytao DATE null,ngayketthuc DATE null,daxoa INTEGER,trangthai INTEGER,trangthaisudung INTEGER,ngaysua DATE null)";

	public static final String TABLE_SQL_DROP = "drop table cw_quangcao_banner";

	public static final String ORDER_BY_JPQL = " ORDER BY bangQuangCao.id DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY cw_quangcao_banner.id_ DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static BangQuangCao toModel(BangQuangCaoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BangQuangCao model = new BangQuangCaoImpl();

		model.setId(soapModel.getId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setNguoitao(soapModel.getNguoitao());
		model.setTen(soapModel.getTen());
		model.setDuongdan(soapModel.getDuongdan());
		model.setLienket(soapModel.getLienket());
		model.setNhomKH(soapModel.getNhomKH());
		model.setVitriQC(soapModel.getVitriQC());
		model.setNgaytao(soapModel.getNgaytao());
		model.setNgayketthuc(soapModel.getNgayketthuc());
		model.setDaxoa(soapModel.getDaxoa());
		model.setTrangthai(soapModel.getTrangthai());
		model.setTrangthaisudung(soapModel.getTrangthaisudung());
		model.setNgaysua(soapModel.getNgaysua());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<BangQuangCao> toModels(BangQuangCaoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<BangQuangCao> models = new ArrayList<BangQuangCao>(
			soapModels.length);

		for (BangQuangCaoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public BangQuangCaoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BangQuangCao.class;
	}

	@Override
	public String getModelClassName() {
		return BangQuangCao.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<BangQuangCao, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<BangQuangCao, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BangQuangCao, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((BangQuangCao)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<BangQuangCao, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<BangQuangCao, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(BangQuangCao)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<BangQuangCao, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<BangQuangCao, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<BangQuangCao, Object>>
		_attributeGetterFunctions;

	static {
		Map<String, Function<BangQuangCao, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<BangQuangCao, Object>>();

		attributeGetterFunctions.put("id", BangQuangCao::getId);
		attributeGetterFunctions.put("companyId", BangQuangCao::getCompanyId);
		attributeGetterFunctions.put("groupId", BangQuangCao::getGroupId);
		attributeGetterFunctions.put("nguoitao", BangQuangCao::getNguoitao);
		attributeGetterFunctions.put("ten", BangQuangCao::getTen);
		attributeGetterFunctions.put("duongdan", BangQuangCao::getDuongdan);
		attributeGetterFunctions.put("lienket", BangQuangCao::getLienket);
		attributeGetterFunctions.put("nhomKH", BangQuangCao::getNhomKH);
		attributeGetterFunctions.put("vitriQC", BangQuangCao::getVitriQC);
		attributeGetterFunctions.put("ngaytao", BangQuangCao::getNgaytao);
		attributeGetterFunctions.put(
			"ngayketthuc", BangQuangCao::getNgayketthuc);
		attributeGetterFunctions.put("daxoa", BangQuangCao::getDaxoa);
		attributeGetterFunctions.put("trangthai", BangQuangCao::getTrangthai);
		attributeGetterFunctions.put(
			"trangthaisudung", BangQuangCao::getTrangthaisudung);
		attributeGetterFunctions.put("ngaysua", BangQuangCao::getNgaysua);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
	}

	private static final Map<String, BiConsumer<BangQuangCao, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, BiConsumer<BangQuangCao, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<BangQuangCao, ?>>();

		attributeSetterBiConsumers.put(
			"id", (BiConsumer<BangQuangCao, Long>)BangQuangCao::setId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<BangQuangCao, Long>)BangQuangCao::setCompanyId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<BangQuangCao, Long>)BangQuangCao::setGroupId);
		attributeSetterBiConsumers.put(
			"nguoitao",
			(BiConsumer<BangQuangCao, Long>)BangQuangCao::setNguoitao);
		attributeSetterBiConsumers.put(
			"ten", (BiConsumer<BangQuangCao, String>)BangQuangCao::setTen);
		attributeSetterBiConsumers.put(
			"duongdan",
			(BiConsumer<BangQuangCao, String>)BangQuangCao::setDuongdan);
		attributeSetterBiConsumers.put(
			"lienket",
			(BiConsumer<BangQuangCao, String>)BangQuangCao::setLienket);
		attributeSetterBiConsumers.put(
			"nhomKH", (BiConsumer<BangQuangCao, Long>)BangQuangCao::setNhomKH);
		attributeSetterBiConsumers.put(
			"vitriQC",
			(BiConsumer<BangQuangCao, Long>)BangQuangCao::setVitriQC);
		attributeSetterBiConsumers.put(
			"ngaytao",
			(BiConsumer<BangQuangCao, Date>)BangQuangCao::setNgaytao);
		attributeSetterBiConsumers.put(
			"ngayketthuc",
			(BiConsumer<BangQuangCao, Date>)BangQuangCao::setNgayketthuc);
		attributeSetterBiConsumers.put(
			"daxoa", (BiConsumer<BangQuangCao, Integer>)BangQuangCao::setDaxoa);
		attributeSetterBiConsumers.put(
			"trangthai",
			(BiConsumer<BangQuangCao, Integer>)BangQuangCao::setTrangthai);
		attributeSetterBiConsumers.put(
			"trangthaisudung",
			(BiConsumer<BangQuangCao, Integer>)
				BangQuangCao::setTrangthaisudung);
		attributeSetterBiConsumers.put(
			"ngaysua",
			(BiConsumer<BangQuangCao, Date>)BangQuangCao::setNgaysua);

		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getNguoitao() {
		return _nguoitao;
	}

	@Override
	public void setNguoitao(long nguoitao) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nguoitao = nguoitao;
	}

	@JSON
	@Override
	public String getTen() {
		if (_ten == null) {
			return "";
		}
		else {
			return _ten;
		}
	}

	@Override
	public void setTen(String ten) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ten = ten;
	}

	@JSON
	@Override
	public String getDuongdan() {
		if (_duongdan == null) {
			return "";
		}
		else {
			return _duongdan;
		}
	}

	@Override
	public void setDuongdan(String duongdan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_duongdan = duongdan;
	}

	@JSON
	@Override
	public String getLienket() {
		if (_lienket == null) {
			return "";
		}
		else {
			return _lienket;
		}
	}

	@Override
	public void setLienket(String lienket) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lienket = lienket;
	}

	@JSON
	@Override
	public long getNhomKH() {
		return _nhomKH;
	}

	@Override
	public void setNhomKH(long nhomKH) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nhomKH = nhomKH;
	}

	@JSON
	@Override
	public long getVitriQC() {
		return _vitriQC;
	}

	@Override
	public void setVitriQC(long vitriQC) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vitriQC = vitriQC;
	}

	@JSON
	@Override
	public Date getNgaytao() {
		return _ngaytao;
	}

	@Override
	public void setNgaytao(Date ngaytao) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngaytao = ngaytao;
	}

	@JSON
	@Override
	public Date getNgayketthuc() {
		return _ngayketthuc;
	}

	@Override
	public void setNgayketthuc(Date ngayketthuc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngayketthuc = ngayketthuc;
	}

	@JSON
	@Override
	public int getDaxoa() {
		return _daxoa;
	}

	@Override
	public void setDaxoa(int daxoa) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_daxoa = daxoa;
	}

	@JSON
	@Override
	public int getTrangthai() {
		return _trangthai;
	}

	@Override
	public void setTrangthai(int trangthai) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trangthai = trangthai;
	}

	@JSON
	@Override
	public int getTrangthaisudung() {
		return _trangthaisudung;
	}

	@Override
	public void setTrangthaisudung(int trangthaisudung) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trangthaisudung = trangthaisudung;
	}

	@JSON
	@Override
	public Date getNgaysua() {
		return _ngaysua;
	}

	@Override
	public void setNgaysua(Date ngaysua) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngaysua = ngaysua;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), BangQuangCao.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BangQuangCao toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, BangQuangCao>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BangQuangCaoImpl bangQuangCaoImpl = new BangQuangCaoImpl();

		bangQuangCaoImpl.setId(getId());
		bangQuangCaoImpl.setCompanyId(getCompanyId());
		bangQuangCaoImpl.setGroupId(getGroupId());
		bangQuangCaoImpl.setNguoitao(getNguoitao());
		bangQuangCaoImpl.setTen(getTen());
		bangQuangCaoImpl.setDuongdan(getDuongdan());
		bangQuangCaoImpl.setLienket(getLienket());
		bangQuangCaoImpl.setNhomKH(getNhomKH());
		bangQuangCaoImpl.setVitriQC(getVitriQC());
		bangQuangCaoImpl.setNgaytao(getNgaytao());
		bangQuangCaoImpl.setNgayketthuc(getNgayketthuc());
		bangQuangCaoImpl.setDaxoa(getDaxoa());
		bangQuangCaoImpl.setTrangthai(getTrangthai());
		bangQuangCaoImpl.setTrangthaisudung(getTrangthaisudung());
		bangQuangCaoImpl.setNgaysua(getNgaysua());

		bangQuangCaoImpl.resetOriginalValues();

		return bangQuangCaoImpl;
	}

	@Override
	public int compareTo(BangQuangCao bangQuangCao) {
		int value = 0;

		if (getId() < bangQuangCao.getId()) {
			value = -1;
		}
		else if (getId() > bangQuangCao.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof BangQuangCao)) {
			return false;
		}

		BangQuangCao bangQuangCao = (BangQuangCao)object;

		long primaryKey = bangQuangCao.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<BangQuangCao> toCacheModel() {
		BangQuangCaoCacheModel bangQuangCaoCacheModel =
			new BangQuangCaoCacheModel();

		bangQuangCaoCacheModel.id = getId();

		bangQuangCaoCacheModel.companyId = getCompanyId();

		bangQuangCaoCacheModel.groupId = getGroupId();

		bangQuangCaoCacheModel.nguoitao = getNguoitao();

		bangQuangCaoCacheModel.ten = getTen();

		String ten = bangQuangCaoCacheModel.ten;

		if ((ten != null) && (ten.length() == 0)) {
			bangQuangCaoCacheModel.ten = null;
		}

		bangQuangCaoCacheModel.duongdan = getDuongdan();

		String duongdan = bangQuangCaoCacheModel.duongdan;

		if ((duongdan != null) && (duongdan.length() == 0)) {
			bangQuangCaoCacheModel.duongdan = null;
		}

		bangQuangCaoCacheModel.lienket = getLienket();

		String lienket = bangQuangCaoCacheModel.lienket;

		if ((lienket != null) && (lienket.length() == 0)) {
			bangQuangCaoCacheModel.lienket = null;
		}

		bangQuangCaoCacheModel.nhomKH = getNhomKH();

		bangQuangCaoCacheModel.vitriQC = getVitriQC();

		Date ngaytao = getNgaytao();

		if (ngaytao != null) {
			bangQuangCaoCacheModel.ngaytao = ngaytao.getTime();
		}
		else {
			bangQuangCaoCacheModel.ngaytao = Long.MIN_VALUE;
		}

		Date ngayketthuc = getNgayketthuc();

		if (ngayketthuc != null) {
			bangQuangCaoCacheModel.ngayketthuc = ngayketthuc.getTime();
		}
		else {
			bangQuangCaoCacheModel.ngayketthuc = Long.MIN_VALUE;
		}

		bangQuangCaoCacheModel.daxoa = getDaxoa();

		bangQuangCaoCacheModel.trangthai = getTrangthai();

		bangQuangCaoCacheModel.trangthaisudung = getTrangthaisudung();

		Date ngaysua = getNgaysua();

		if (ngaysua != null) {
			bangQuangCaoCacheModel.ngaysua = ngaysua.getTime();
		}
		else {
			bangQuangCaoCacheModel.ngaysua = Long.MIN_VALUE;
		}

		return bangQuangCaoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<BangQuangCao, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<BangQuangCao, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BangQuangCao, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((BangQuangCao)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<BangQuangCao, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<BangQuangCao, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BangQuangCao, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((BangQuangCao)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, BangQuangCao>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					BangQuangCao.class, ModelWrapper.class);

	}

	private long _id;
	private long _companyId;
	private long _groupId;
	private long _nguoitao;
	private String _ten;
	private String _duongdan;
	private String _lienket;
	private long _nhomKH;
	private long _vitriQC;
	private Date _ngaytao;
	private Date _ngayketthuc;
	private int _daxoa;
	private int _trangthai;
	private int _trangthaisudung;
	private Date _ngaysua;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<BangQuangCao, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((BangQuangCao)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("nguoitao", _nguoitao);
		_columnOriginalValues.put("ten", _ten);
		_columnOriginalValues.put("duongdan", _duongdan);
		_columnOriginalValues.put("lienket", _lienket);
		_columnOriginalValues.put("nhomKH", _nhomKH);
		_columnOriginalValues.put("vitriQC", _vitriQC);
		_columnOriginalValues.put("ngaytao", _ngaytao);
		_columnOriginalValues.put("ngayketthuc", _ngayketthuc);
		_columnOriginalValues.put("daxoa", _daxoa);
		_columnOriginalValues.put("trangthai", _trangthai);
		_columnOriginalValues.put("trangthaisudung", _trangthaisudung);
		_columnOriginalValues.put("ngaysua", _ngaysua);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("companyId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("nguoitao", 8L);

		columnBitmasks.put("ten", 16L);

		columnBitmasks.put("duongdan", 32L);

		columnBitmasks.put("lienket", 64L);

		columnBitmasks.put("nhomKH", 128L);

		columnBitmasks.put("vitriQC", 256L);

		columnBitmasks.put("ngaytao", 512L);

		columnBitmasks.put("ngayketthuc", 1024L);

		columnBitmasks.put("daxoa", 2048L);

		columnBitmasks.put("trangthai", 4096L);

		columnBitmasks.put("trangthaisudung", 8192L);

		columnBitmasks.put("ngaysua", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private BangQuangCao _escapedModel;

}