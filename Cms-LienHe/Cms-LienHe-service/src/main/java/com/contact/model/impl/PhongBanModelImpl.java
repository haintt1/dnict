/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.contact.model.impl;

import com.contact.model.PhongBan;
import com.contact.model.PhongBanModel;
import com.contact.model.PhongBanSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PhongBan service. Represents a row in the &quot;cms_lienhe_phongban&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PhongBanModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PhongBanImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PhongBanImpl
 * @generated
 */
@JSON(strict = true)
public class PhongBanModelImpl
	extends BaseModelImpl<PhongBan> implements PhongBanModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a phong ban model instance should use the <code>PhongBan</code> interface instead.
	 */
	public static final String TABLE_NAME = "cms_lienhe_phongban";

	public static final Object[][] TABLE_COLUMNS = {
		{"phongbanId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"ten", Types.VARCHAR},
		{"moTa", Types.VARCHAR}, {"tochuc_id", Types.BIGINT},
		{"tinhTrang", Types.BIGINT}, {"sapXep", Types.INTEGER},
		{"daXoa", Types.BIGINT}, {"ngayTao", Types.TIMESTAMP},
		{"ngaySua", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("phongbanId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ten", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("moTa", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tochuc_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tinhTrang", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sapXep", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("daXoa", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ngayTao", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ngaySua", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cms_lienhe_phongban (phongbanId LONG not null primary key,companyId LONG,groupId LONG,ten VARCHAR(75) null,moTa VARCHAR(75) null,tochuc_id LONG,tinhTrang LONG,sapXep INTEGER,daXoa LONG,ngayTao DATE null,ngaySua DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table cms_lienhe_phongban";

	public static final String ORDER_BY_JPQL =
		" ORDER BY phongBan.phongbanId DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY cms_lienhe_phongban.phongbanId DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TEN_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PHONGBANID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static PhongBan toModel(PhongBanSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PhongBan model = new PhongBanImpl();

		model.setPhongbanId(soapModel.getPhongbanId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setTen(soapModel.getTen());
		model.setMoTa(soapModel.getMoTa());
		model.setTochuc_id(soapModel.getTochuc_id());
		model.setTinhTrang(soapModel.getTinhTrang());
		model.setSapXep(soapModel.getSapXep());
		model.setDaXoa(soapModel.getDaXoa());
		model.setNgayTao(soapModel.getNgayTao());
		model.setNgaySua(soapModel.getNgaySua());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<PhongBan> toModels(PhongBanSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PhongBan> models = new ArrayList<PhongBan>(soapModels.length);

		for (PhongBanSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public PhongBanModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _phongbanId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPhongbanId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _phongbanId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PhongBan.class;
	}

	@Override
	public String getModelClassName() {
		return PhongBan.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PhongBan, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PhongBan, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PhongBan, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((PhongBan)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PhongBan, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PhongBan, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PhongBan)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PhongBan, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PhongBan, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<PhongBan, Object>>
		_attributeGetterFunctions;

	static {
		Map<String, Function<PhongBan, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<PhongBan, Object>>();

		attributeGetterFunctions.put("phongbanId", PhongBan::getPhongbanId);
		attributeGetterFunctions.put("companyId", PhongBan::getCompanyId);
		attributeGetterFunctions.put("groupId", PhongBan::getGroupId);
		attributeGetterFunctions.put("ten", PhongBan::getTen);
		attributeGetterFunctions.put("moTa", PhongBan::getMoTa);
		attributeGetterFunctions.put("tochuc_id", PhongBan::getTochuc_id);
		attributeGetterFunctions.put("tinhTrang", PhongBan::getTinhTrang);
		attributeGetterFunctions.put("sapXep", PhongBan::getSapXep);
		attributeGetterFunctions.put("daXoa", PhongBan::getDaXoa);
		attributeGetterFunctions.put("ngayTao", PhongBan::getNgayTao);
		attributeGetterFunctions.put("ngaySua", PhongBan::getNgaySua);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
	}

	private static final Map<String, BiConsumer<PhongBan, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, BiConsumer<PhongBan, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<PhongBan, ?>>();

		attributeSetterBiConsumers.put(
			"phongbanId", (BiConsumer<PhongBan, Long>)PhongBan::setPhongbanId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<PhongBan, Long>)PhongBan::setCompanyId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<PhongBan, Long>)PhongBan::setGroupId);
		attributeSetterBiConsumers.put(
			"ten", (BiConsumer<PhongBan, String>)PhongBan::setTen);
		attributeSetterBiConsumers.put(
			"moTa", (BiConsumer<PhongBan, String>)PhongBan::setMoTa);
		attributeSetterBiConsumers.put(
			"tochuc_id", (BiConsumer<PhongBan, Long>)PhongBan::setTochuc_id);
		attributeSetterBiConsumers.put(
			"tinhTrang", (BiConsumer<PhongBan, Long>)PhongBan::setTinhTrang);
		attributeSetterBiConsumers.put(
			"sapXep", (BiConsumer<PhongBan, Integer>)PhongBan::setSapXep);
		attributeSetterBiConsumers.put(
			"daXoa", (BiConsumer<PhongBan, Long>)PhongBan::setDaXoa);
		attributeSetterBiConsumers.put(
			"ngayTao", (BiConsumer<PhongBan, Date>)PhongBan::setNgayTao);
		attributeSetterBiConsumers.put(
			"ngaySua", (BiConsumer<PhongBan, Date>)PhongBan::setNgaySua);

		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getPhongbanId() {
		return _phongbanId;
	}

	@Override
	public void setPhongbanId(long phongbanId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phongbanId = phongbanId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public String getTen() {
		if (_ten == null) {
			return "";
		}
		else {
			return _ten;
		}
	}

	@Override
	public void setTen(String ten) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ten = ten;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTen() {
		return getColumnOriginalValue("ten");
	}

	@JSON
	@Override
	public String getMoTa() {
		if (_moTa == null) {
			return "";
		}
		else {
			return _moTa;
		}
	}

	@Override
	public void setMoTa(String moTa) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_moTa = moTa;
	}

	@JSON
	@Override
	public long getTochuc_id() {
		return _tochuc_id;
	}

	@Override
	public void setTochuc_id(long tochuc_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tochuc_id = tochuc_id;
	}

	@JSON
	@Override
	public long getTinhTrang() {
		return _tinhTrang;
	}

	@Override
	public void setTinhTrang(long tinhTrang) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tinhTrang = tinhTrang;
	}

	@JSON
	@Override
	public int getSapXep() {
		return _sapXep;
	}

	@Override
	public void setSapXep(int sapXep) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sapXep = sapXep;
	}

	@JSON
	@Override
	public long getDaXoa() {
		return _daXoa;
	}

	@Override
	public void setDaXoa(long daXoa) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_daXoa = daXoa;
	}

	@JSON
	@Override
	public Date getNgayTao() {
		return _ngayTao;
	}

	@Override
	public void setNgayTao(Date ngayTao) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngayTao = ngayTao;
	}

	@JSON
	@Override
	public Date getNgaySua() {
		return _ngaySua;
	}

	@Override
	public void setNgaySua(Date ngaySua) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngaySua = ngaySua;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), PhongBan.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PhongBan toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PhongBan>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PhongBanImpl phongBanImpl = new PhongBanImpl();

		phongBanImpl.setPhongbanId(getPhongbanId());
		phongBanImpl.setCompanyId(getCompanyId());
		phongBanImpl.setGroupId(getGroupId());
		phongBanImpl.setTen(getTen());
		phongBanImpl.setMoTa(getMoTa());
		phongBanImpl.setTochuc_id(getTochuc_id());
		phongBanImpl.setTinhTrang(getTinhTrang());
		phongBanImpl.setSapXep(getSapXep());
		phongBanImpl.setDaXoa(getDaXoa());
		phongBanImpl.setNgayTao(getNgayTao());
		phongBanImpl.setNgaySua(getNgaySua());

		phongBanImpl.resetOriginalValues();

		return phongBanImpl;
	}

	@Override
	public int compareTo(PhongBan phongBan) {
		int value = 0;

		if (getPhongbanId() < phongBan.getPhongbanId()) {
			value = -1;
		}
		else if (getPhongbanId() > phongBan.getPhongbanId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PhongBan)) {
			return false;
		}

		PhongBan phongBan = (PhongBan)object;

		long primaryKey = phongBan.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PhongBan> toCacheModel() {
		PhongBanCacheModel phongBanCacheModel = new PhongBanCacheModel();

		phongBanCacheModel.phongbanId = getPhongbanId();

		phongBanCacheModel.companyId = getCompanyId();

		phongBanCacheModel.groupId = getGroupId();

		phongBanCacheModel.ten = getTen();

		String ten = phongBanCacheModel.ten;

		if ((ten != null) && (ten.length() == 0)) {
			phongBanCacheModel.ten = null;
		}

		phongBanCacheModel.moTa = getMoTa();

		String moTa = phongBanCacheModel.moTa;

		if ((moTa != null) && (moTa.length() == 0)) {
			phongBanCacheModel.moTa = null;
		}

		phongBanCacheModel.tochuc_id = getTochuc_id();

		phongBanCacheModel.tinhTrang = getTinhTrang();

		phongBanCacheModel.sapXep = getSapXep();

		phongBanCacheModel.daXoa = getDaXoa();

		Date ngayTao = getNgayTao();

		if (ngayTao != null) {
			phongBanCacheModel.ngayTao = ngayTao.getTime();
		}
		else {
			phongBanCacheModel.ngayTao = Long.MIN_VALUE;
		}

		Date ngaySua = getNgaySua();

		if (ngaySua != null) {
			phongBanCacheModel.ngaySua = ngaySua.getTime();
		}
		else {
			phongBanCacheModel.ngaySua = Long.MIN_VALUE;
		}

		return phongBanCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PhongBan, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PhongBan, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PhongBan, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((PhongBan)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<PhongBan, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<PhongBan, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PhongBan, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((PhongBan)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PhongBan>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					PhongBan.class, ModelWrapper.class);

	}

	private long _phongbanId;
	private long _companyId;
	private long _groupId;
	private String _ten;
	private String _moTa;
	private long _tochuc_id;
	private long _tinhTrang;
	private int _sapXep;
	private long _daXoa;
	private Date _ngayTao;
	private Date _ngaySua;

	public <T> T getColumnValue(String columnName) {
		Function<PhongBan, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PhongBan)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("phongbanId", _phongbanId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("ten", _ten);
		_columnOriginalValues.put("moTa", _moTa);
		_columnOriginalValues.put("tochuc_id", _tochuc_id);
		_columnOriginalValues.put("tinhTrang", _tinhTrang);
		_columnOriginalValues.put("sapXep", _sapXep);
		_columnOriginalValues.put("daXoa", _daXoa);
		_columnOriginalValues.put("ngayTao", _ngayTao);
		_columnOriginalValues.put("ngaySua", _ngaySua);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("phongbanId", 1L);

		columnBitmasks.put("companyId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("ten", 8L);

		columnBitmasks.put("moTa", 16L);

		columnBitmasks.put("tochuc_id", 32L);

		columnBitmasks.put("tinhTrang", 64L);

		columnBitmasks.put("sapXep", 128L);

		columnBitmasks.put("daXoa", 256L);

		columnBitmasks.put("ngayTao", 512L);

		columnBitmasks.put("ngaySua", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PhongBan _escapedModel;

}