/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.demo.model.impl;

import com.demo.model.DemoDB;
import com.demo.model.DemoDBModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DemoDB service. Represents a row in the &quot;cw_DemoDB&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DemoDBModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DemoDBImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DemoDBImpl
 * @generated
 */
public class DemoDBModelImpl
	extends BaseModelImpl<DemoDB> implements DemoDBModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a demo db model instance should use the <code>DemoDB</code> interface instead.
	 */
	public static final String TABLE_NAME = "cw_DemoDB";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"ten", Types.VARCHAR}, {"moTa", Types.VARCHAR},
		{"noiDung", Types.VARCHAR}, {"ngayxuatban", Types.TIMESTAMP},
		{"ngayhethan", Types.TIMESTAMP}, {"tinhtrang", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ten", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("moTa", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noiDung", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ngayxuatban", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ngayhethan", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("tinhtrang", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cw_DemoDB (id_ LONG not null primary key,ten VARCHAR(75) null,moTa VARCHAR(75) null,noiDung VARCHAR(75) null,ngayxuatban DATE null,ngayhethan DATE null,tinhtrang INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table cw_DemoDB";

	public static final String ORDER_BY_JPQL = " ORDER BY demoDB.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY cw_DemoDB.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DemoDBModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DemoDB.class;
	}

	@Override
	public String getModelClassName() {
		return DemoDB.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DemoDB, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DemoDB, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DemoDB, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((DemoDB)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DemoDB, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DemoDB, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DemoDB)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DemoDB, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DemoDB, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DemoDB, Object>>
		_attributeGetterFunctions;

	static {
		Map<String, Function<DemoDB, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DemoDB, Object>>();

		attributeGetterFunctions.put("id", DemoDB::getId);
		attributeGetterFunctions.put("ten", DemoDB::getTen);
		attributeGetterFunctions.put("moTa", DemoDB::getMoTa);
		attributeGetterFunctions.put("noiDung", DemoDB::getNoiDung);
		attributeGetterFunctions.put("ngayxuatban", DemoDB::getNgayxuatban);
		attributeGetterFunctions.put("ngayhethan", DemoDB::getNgayhethan);
		attributeGetterFunctions.put("tinhtrang", DemoDB::getTinhtrang);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
	}

	private static final Map<String, BiConsumer<DemoDB, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, BiConsumer<DemoDB, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DemoDB, ?>>();

		attributeSetterBiConsumers.put(
			"id", (BiConsumer<DemoDB, Long>)DemoDB::setId);
		attributeSetterBiConsumers.put(
			"ten", (BiConsumer<DemoDB, String>)DemoDB::setTen);
		attributeSetterBiConsumers.put(
			"moTa", (BiConsumer<DemoDB, String>)DemoDB::setMoTa);
		attributeSetterBiConsumers.put(
			"noiDung", (BiConsumer<DemoDB, String>)DemoDB::setNoiDung);
		attributeSetterBiConsumers.put(
			"ngayxuatban", (BiConsumer<DemoDB, Date>)DemoDB::setNgayxuatban);
		attributeSetterBiConsumers.put(
			"ngayhethan", (BiConsumer<DemoDB, Date>)DemoDB::setNgayhethan);
		attributeSetterBiConsumers.put(
			"tinhtrang", (BiConsumer<DemoDB, Integer>)DemoDB::setTinhtrang);

		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public String getTen() {
		if (_ten == null) {
			return "";
		}
		else {
			return _ten;
		}
	}

	@Override
	public void setTen(String ten) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ten = ten;
	}

	@Override
	public String getMoTa() {
		if (_moTa == null) {
			return "";
		}
		else {
			return _moTa;
		}
	}

	@Override
	public void setMoTa(String moTa) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_moTa = moTa;
	}

	@Override
	public String getNoiDung() {
		if (_noiDung == null) {
			return "";
		}
		else {
			return _noiDung;
		}
	}

	@Override
	public void setNoiDung(String noiDung) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noiDung = noiDung;
	}

	@Override
	public Date getNgayxuatban() {
		return _ngayxuatban;
	}

	@Override
	public void setNgayxuatban(Date ngayxuatban) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngayxuatban = ngayxuatban;
	}

	@Override
	public Date getNgayhethan() {
		return _ngayhethan;
	}

	@Override
	public void setNgayhethan(Date ngayhethan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngayhethan = ngayhethan;
	}

	@Override
	public int getTinhtrang() {
		return _tinhtrang;
	}

	@Override
	public void setTinhtrang(int tinhtrang) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tinhtrang = tinhtrang;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DemoDB.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DemoDB toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DemoDB>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DemoDBImpl demoDBImpl = new DemoDBImpl();

		demoDBImpl.setId(getId());
		demoDBImpl.setTen(getTen());
		demoDBImpl.setMoTa(getMoTa());
		demoDBImpl.setNoiDung(getNoiDung());
		demoDBImpl.setNgayxuatban(getNgayxuatban());
		demoDBImpl.setNgayhethan(getNgayhethan());
		demoDBImpl.setTinhtrang(getTinhtrang());

		demoDBImpl.resetOriginalValues();

		return demoDBImpl;
	}

	@Override
	public int compareTo(DemoDB demoDB) {
		long primaryKey = demoDB.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DemoDB)) {
			return false;
		}

		DemoDB demoDB = (DemoDB)object;

		long primaryKey = demoDB.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DemoDB> toCacheModel() {
		DemoDBCacheModel demoDBCacheModel = new DemoDBCacheModel();

		demoDBCacheModel.id = getId();

		demoDBCacheModel.ten = getTen();

		String ten = demoDBCacheModel.ten;

		if ((ten != null) && (ten.length() == 0)) {
			demoDBCacheModel.ten = null;
		}

		demoDBCacheModel.moTa = getMoTa();

		String moTa = demoDBCacheModel.moTa;

		if ((moTa != null) && (moTa.length() == 0)) {
			demoDBCacheModel.moTa = null;
		}

		demoDBCacheModel.noiDung = getNoiDung();

		String noiDung = demoDBCacheModel.noiDung;

		if ((noiDung != null) && (noiDung.length() == 0)) {
			demoDBCacheModel.noiDung = null;
		}

		Date ngayxuatban = getNgayxuatban();

		if (ngayxuatban != null) {
			demoDBCacheModel.ngayxuatban = ngayxuatban.getTime();
		}
		else {
			demoDBCacheModel.ngayxuatban = Long.MIN_VALUE;
		}

		Date ngayhethan = getNgayhethan();

		if (ngayhethan != null) {
			demoDBCacheModel.ngayhethan = ngayhethan.getTime();
		}
		else {
			demoDBCacheModel.ngayhethan = Long.MIN_VALUE;
		}

		demoDBCacheModel.tinhtrang = getTinhtrang();

		return demoDBCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DemoDB, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DemoDB, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DemoDB, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((DemoDB)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DemoDB, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DemoDB, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DemoDB, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DemoDB)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DemoDB>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DemoDB.class, ModelWrapper.class);

	}

	private long _id;
	private String _ten;
	private String _moTa;
	private String _noiDung;
	private Date _ngayxuatban;
	private Date _ngayhethan;
	private int _tinhtrang;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DemoDB, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DemoDB)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("ten", _ten);
		_columnOriginalValues.put("moTa", _moTa);
		_columnOriginalValues.put("noiDung", _noiDung);
		_columnOriginalValues.put("ngayxuatban", _ngayxuatban);
		_columnOriginalValues.put("ngayhethan", _ngayhethan);
		_columnOriginalValues.put("tinhtrang", _tinhtrang);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("ten", 2L);

		columnBitmasks.put("moTa", 4L);

		columnBitmasks.put("noiDung", 8L);

		columnBitmasks.put("ngayxuatban", 16L);

		columnBitmasks.put("ngayhethan", 32L);

		columnBitmasks.put("tinhtrang", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DemoDB _escapedModel;

}