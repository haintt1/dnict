/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package lichcoquan.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import lichcoquan.service.model.Lichcoquan;
import lichcoquan.service.model.LichcoquanModel;
import lichcoquan.service.model.LichcoquanSoap;

/**
 * The base model implementation for the Lichcoquan service. Represents a row in the &quot;lcq_lichcoquan&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LichcoquanModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LichcoquanImpl}.
 * </p>
 *
 * @author BinhNT
 * @see LichcoquanImpl
 * @generated
 */
@JSON(strict = true)
public class LichcoquanModelImpl
	extends BaseModelImpl<Lichcoquan> implements LichcoquanModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lichcoquan model instance should use the <code>Lichcoquan</code> interface instead.
	 */
	public static final String TABLE_NAME = "lcq_lichcoquan";

	public static final Object[][] TABLE_COLUMNS = {
		{"lichCongtacId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"content", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"tungay", Types.TIMESTAMP},
		{"denngay", Types.TIMESTAMP}, {"trangthai", Types.INTEGER},
		{"banhanh", Types.INTEGER}, {"tuan", Types.INTEGER},
		{"nam", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("lichCongtacId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("tungay", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("denngay", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("trangthai", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("banhanh", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("tuan", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("nam", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table lcq_lichcoquan (lichCongtacId LONG not null primary key,companyId LONG,userId LONG,content VARCHAR(75) null,createDate DATE null,tungay DATE null,denngay DATE null,trangthai INTEGER,banhanh INTEGER,tuan INTEGER,nam INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table lcq_lichcoquan";

	public static final String ORDER_BY_JPQL =
		" ORDER BY lichcoquan.lichCongtacId DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY lcq_lichcoquan.lichCongtacId DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LICHCONGTACID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Lichcoquan toModel(LichcoquanSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Lichcoquan model = new LichcoquanImpl();

		model.setLichCongtacId(soapModel.getLichCongtacId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setContent(soapModel.getContent());
		model.setCreateDate(soapModel.getCreateDate());
		model.setTungay(soapModel.getTungay());
		model.setDenngay(soapModel.getDenngay());
		model.setTrangthai(soapModel.getTrangthai());
		model.setBanhanh(soapModel.getBanhanh());
		model.setTuan(soapModel.getTuan());
		model.setNam(soapModel.getNam());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Lichcoquan> toModels(LichcoquanSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Lichcoquan> models = new ArrayList<Lichcoquan>(soapModels.length);

		for (LichcoquanSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public LichcoquanModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lichCongtacId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLichCongtacId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lichCongtacId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Lichcoquan.class;
	}

	@Override
	public String getModelClassName() {
		return Lichcoquan.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Lichcoquan, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Lichcoquan, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Lichcoquan, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Lichcoquan)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Lichcoquan, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Lichcoquan, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Lichcoquan)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Lichcoquan, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Lichcoquan, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Lichcoquan>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Lichcoquan.class.getClassLoader(), Lichcoquan.class,
			ModelWrapper.class);

		try {
			Constructor<Lichcoquan> constructor =
				(Constructor<Lichcoquan>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Lichcoquan, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Lichcoquan, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Lichcoquan, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Lichcoquan, Object>>();
		Map<String, BiConsumer<Lichcoquan, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Lichcoquan, ?>>();

		attributeGetterFunctions.put(
			"lichCongtacId", Lichcoquan::getLichCongtacId);
		attributeSetterBiConsumers.put(
			"lichCongtacId",
			(BiConsumer<Lichcoquan, Long>)Lichcoquan::setLichCongtacId);
		attributeGetterFunctions.put("companyId", Lichcoquan::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<Lichcoquan, Long>)Lichcoquan::setCompanyId);
		attributeGetterFunctions.put("userId", Lichcoquan::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Lichcoquan, Long>)Lichcoquan::setUserId);
		attributeGetterFunctions.put("content", Lichcoquan::getContent);
		attributeSetterBiConsumers.put(
			"content", (BiConsumer<Lichcoquan, String>)Lichcoquan::setContent);
		attributeGetterFunctions.put("createDate", Lichcoquan::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Lichcoquan, Date>)Lichcoquan::setCreateDate);
		attributeGetterFunctions.put("tungay", Lichcoquan::getTungay);
		attributeSetterBiConsumers.put(
			"tungay", (BiConsumer<Lichcoquan, Date>)Lichcoquan::setTungay);
		attributeGetterFunctions.put("denngay", Lichcoquan::getDenngay);
		attributeSetterBiConsumers.put(
			"denngay", (BiConsumer<Lichcoquan, Date>)Lichcoquan::setDenngay);
		attributeGetterFunctions.put("trangthai", Lichcoquan::getTrangthai);
		attributeSetterBiConsumers.put(
			"trangthai",
			(BiConsumer<Lichcoquan, Integer>)Lichcoquan::setTrangthai);
		attributeGetterFunctions.put("banhanh", Lichcoquan::getBanhanh);
		attributeSetterBiConsumers.put(
			"banhanh", (BiConsumer<Lichcoquan, Integer>)Lichcoquan::setBanhanh);
		attributeGetterFunctions.put("tuan", Lichcoquan::getTuan);
		attributeSetterBiConsumers.put(
			"tuan", (BiConsumer<Lichcoquan, Integer>)Lichcoquan::setTuan);
		attributeGetterFunctions.put("nam", Lichcoquan::getNam);
		attributeSetterBiConsumers.put(
			"nam", (BiConsumer<Lichcoquan, Integer>)Lichcoquan::setNam);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getLichCongtacId() {
		return _lichCongtacId;
	}

	@Override
	public void setLichCongtacId(long lichCongtacId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lichCongtacId = lichCongtacId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_content = content;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getTungay() {
		return _tungay;
	}

	@Override
	public void setTungay(Date tungay) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tungay = tungay;
	}

	@JSON
	@Override
	public Date getDenngay() {
		return _denngay;
	}

	@Override
	public void setDenngay(Date denngay) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_denngay = denngay;
	}

	@JSON
	@Override
	public int getTrangthai() {
		return _trangthai;
	}

	@Override
	public void setTrangthai(int trangthai) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trangthai = trangthai;
	}

	@JSON
	@Override
	public int getBanhanh() {
		return _banhanh;
	}

	@Override
	public void setBanhanh(int banhanh) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_banhanh = banhanh;
	}

	@JSON
	@Override
	public int getTuan() {
		return _tuan;
	}

	@Override
	public void setTuan(int tuan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tuan = tuan;
	}

	@JSON
	@Override
	public int getNam() {
		return _nam;
	}

	@Override
	public void setNam(int nam) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nam = nam;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Lichcoquan.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Lichcoquan toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Lichcoquan>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LichcoquanImpl lichcoquanImpl = new LichcoquanImpl();

		lichcoquanImpl.setLichCongtacId(getLichCongtacId());
		lichcoquanImpl.setCompanyId(getCompanyId());
		lichcoquanImpl.setUserId(getUserId());
		lichcoquanImpl.setContent(getContent());
		lichcoquanImpl.setCreateDate(getCreateDate());
		lichcoquanImpl.setTungay(getTungay());
		lichcoquanImpl.setDenngay(getDenngay());
		lichcoquanImpl.setTrangthai(getTrangthai());
		lichcoquanImpl.setBanhanh(getBanhanh());
		lichcoquanImpl.setTuan(getTuan());
		lichcoquanImpl.setNam(getNam());

		lichcoquanImpl.resetOriginalValues();

		return lichcoquanImpl;
	}

	@Override
	public int compareTo(Lichcoquan lichcoquan) {
		int value = 0;

		if (getLichCongtacId() < lichcoquan.getLichCongtacId()) {
			value = -1;
		}
		else if (getLichCongtacId() > lichcoquan.getLichCongtacId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Lichcoquan)) {
			return false;
		}

		Lichcoquan lichcoquan = (Lichcoquan)object;

		long primaryKey = lichcoquan.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Lichcoquan> toCacheModel() {
		LichcoquanCacheModel lichcoquanCacheModel = new LichcoquanCacheModel();

		lichcoquanCacheModel.lichCongtacId = getLichCongtacId();

		lichcoquanCacheModel.companyId = getCompanyId();

		lichcoquanCacheModel.userId = getUserId();

		lichcoquanCacheModel.content = getContent();

		String content = lichcoquanCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			lichcoquanCacheModel.content = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			lichcoquanCacheModel.createDate = createDate.getTime();
		}
		else {
			lichcoquanCacheModel.createDate = Long.MIN_VALUE;
		}

		Date tungay = getTungay();

		if (tungay != null) {
			lichcoquanCacheModel.tungay = tungay.getTime();
		}
		else {
			lichcoquanCacheModel.tungay = Long.MIN_VALUE;
		}

		Date denngay = getDenngay();

		if (denngay != null) {
			lichcoquanCacheModel.denngay = denngay.getTime();
		}
		else {
			lichcoquanCacheModel.denngay = Long.MIN_VALUE;
		}

		lichcoquanCacheModel.trangthai = getTrangthai();

		lichcoquanCacheModel.banhanh = getBanhanh();

		lichcoquanCacheModel.tuan = getTuan();

		lichcoquanCacheModel.nam = getNam();

		return lichcoquanCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Lichcoquan, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Lichcoquan, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Lichcoquan, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Lichcoquan)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Lichcoquan, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Lichcoquan, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Lichcoquan, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Lichcoquan)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Lichcoquan>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _lichCongtacId;
	private long _companyId;
	private long _userId;
	private String _content;
	private Date _createDate;
	private Date _tungay;
	private Date _denngay;
	private int _trangthai;
	private int _banhanh;
	private int _tuan;
	private int _nam;

	public <T> T getColumnValue(String columnName) {
		Function<Lichcoquan, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Lichcoquan)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("lichCongtacId", _lichCongtacId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("content", _content);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("tungay", _tungay);
		_columnOriginalValues.put("denngay", _denngay);
		_columnOriginalValues.put("trangthai", _trangthai);
		_columnOriginalValues.put("banhanh", _banhanh);
		_columnOriginalValues.put("tuan", _tuan);
		_columnOriginalValues.put("nam", _nam);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("lichCongtacId", 1L);

		columnBitmasks.put("companyId", 2L);

		columnBitmasks.put("userId", 4L);

		columnBitmasks.put("content", 8L);

		columnBitmasks.put("createDate", 16L);

		columnBitmasks.put("tungay", 32L);

		columnBitmasks.put("denngay", 64L);

		columnBitmasks.put("trangthai", 128L);

		columnBitmasks.put("banhanh", 256L);

		columnBitmasks.put("tuan", 512L);

		columnBitmasks.put("nam", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Lichcoquan _escapedModel;

}