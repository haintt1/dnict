/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package qlanphamdb.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import qlanphamdb.model.AnPham_DeCuong;
import qlanphamdb.model.AnPham_DeCuongModel;

/**
 * The base model implementation for the AnPham_DeCuong service. Represents a row in the &quot;cw_AnPham_DeCuong&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AnPham_DeCuongModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AnPham_DeCuongImpl}.
 * </p>
 *
 * @author dnict
 * @see AnPham_DeCuongImpl
 * @generated
 */
public class AnPham_DeCuongModelImpl
	extends BaseModelImpl<AnPham_DeCuong> implements AnPham_DeCuongModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a an pham_ de cuong model instance should use the <code>AnPham_DeCuong</code> interface instead.
	 */
	public static final String TABLE_NAME = "cw_AnPham_DeCuong";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"ten", Types.VARCHAR},
		{"moTa", Types.VARCHAR}, {"loaiId", Types.BIGINT},
		{"noiDung", Types.VARCHAR}, {"phienBan", Types.BIGINT},
		{"nguoiTao", Types.BIGINT}, {"ngayTao", Types.TIMESTAMP},
		{"nguoiSua", Types.BIGINT}, {"ngaySua", Types.TIMESTAMP},
		{"nguoiNhan", Types.BIGINT}, {"nguoiXuLy", Types.BIGINT},
		{"ngayXuLy", Types.TIMESTAMP}, {"language", Types.VARCHAR},
		{"status", Types.INTEGER}, {"orders", Types.BIGINT},
		{"delete_status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ten", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("moTa", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("loaiId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("noiDung", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phienBan", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nguoiTao", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ngayTao", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nguoiSua", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ngaySua", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nguoiNhan", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nguoiXuLy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ngayXuLy", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("orders", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("delete_status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cw_AnPham_DeCuong (id_ LONG not null primary key,groupId LONG,companyId LONG,ten VARCHAR(75) null,moTa VARCHAR(75) null,loaiId LONG,noiDung VARCHAR(75) null,phienBan LONG,nguoiTao LONG,ngayTao DATE null,nguoiSua LONG,ngaySua DATE null,nguoiNhan LONG,nguoiXuLy LONG,ngayXuLy DATE null,language VARCHAR(75) null,status INTEGER,orders LONG,delete_status INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table cw_AnPham_DeCuong";

	public static final String ORDER_BY_JPQL =
		" ORDER BY anPham_DeCuong.id DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY cw_AnPham_DeCuong.id_ DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AnPham_DeCuongModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AnPham_DeCuong.class;
	}

	@Override
	public String getModelClassName() {
		return AnPham_DeCuong.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AnPham_DeCuong, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AnPham_DeCuong, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AnPham_DeCuong, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AnPham_DeCuong)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AnPham_DeCuong, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AnPham_DeCuong, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AnPham_DeCuong)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AnPham_DeCuong, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AnPham_DeCuong, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AnPham_DeCuong>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AnPham_DeCuong.class.getClassLoader(), AnPham_DeCuong.class,
			ModelWrapper.class);

		try {
			Constructor<AnPham_DeCuong> constructor =
				(Constructor<AnPham_DeCuong>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<AnPham_DeCuong, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AnPham_DeCuong, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AnPham_DeCuong, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<AnPham_DeCuong, Object>>();
		Map<String, BiConsumer<AnPham_DeCuong, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<AnPham_DeCuong, ?>>();

		attributeGetterFunctions.put("id", AnPham_DeCuong::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<AnPham_DeCuong, Long>)AnPham_DeCuong::setId);
		attributeGetterFunctions.put("groupId", AnPham_DeCuong::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<AnPham_DeCuong, Long>)AnPham_DeCuong::setGroupId);
		attributeGetterFunctions.put("companyId", AnPham_DeCuong::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<AnPham_DeCuong, Long>)AnPham_DeCuong::setCompanyId);
		attributeGetterFunctions.put("ten", AnPham_DeCuong::getTen);
		attributeSetterBiConsumers.put(
			"ten", (BiConsumer<AnPham_DeCuong, String>)AnPham_DeCuong::setTen);
		attributeGetterFunctions.put("moTa", AnPham_DeCuong::getMoTa);
		attributeSetterBiConsumers.put(
			"moTa",
			(BiConsumer<AnPham_DeCuong, String>)AnPham_DeCuong::setMoTa);
		attributeGetterFunctions.put("loaiId", AnPham_DeCuong::getLoaiId);
		attributeSetterBiConsumers.put(
			"loaiId",
			(BiConsumer<AnPham_DeCuong, Long>)AnPham_DeCuong::setLoaiId);
		attributeGetterFunctions.put("noiDung", AnPham_DeCuong::getNoiDung);
		attributeSetterBiConsumers.put(
			"noiDung",
			(BiConsumer<AnPham_DeCuong, String>)AnPham_DeCuong::setNoiDung);
		attributeGetterFunctions.put("phienBan", AnPham_DeCuong::getPhienBan);
		attributeSetterBiConsumers.put(
			"phienBan",
			(BiConsumer<AnPham_DeCuong, Long>)AnPham_DeCuong::setPhienBan);
		attributeGetterFunctions.put("nguoiTao", AnPham_DeCuong::getNguoiTao);
		attributeSetterBiConsumers.put(
			"nguoiTao",
			(BiConsumer<AnPham_DeCuong, Long>)AnPham_DeCuong::setNguoiTao);
		attributeGetterFunctions.put("ngayTao", AnPham_DeCuong::getNgayTao);
		attributeSetterBiConsumers.put(
			"ngayTao",
			(BiConsumer<AnPham_DeCuong, Date>)AnPham_DeCuong::setNgayTao);
		attributeGetterFunctions.put("nguoiSua", AnPham_DeCuong::getNguoiSua);
		attributeSetterBiConsumers.put(
			"nguoiSua",
			(BiConsumer<AnPham_DeCuong, Long>)AnPham_DeCuong::setNguoiSua);
		attributeGetterFunctions.put("ngaySua", AnPham_DeCuong::getNgaySua);
		attributeSetterBiConsumers.put(
			"ngaySua",
			(BiConsumer<AnPham_DeCuong, Date>)AnPham_DeCuong::setNgaySua);
		attributeGetterFunctions.put("nguoiNhan", AnPham_DeCuong::getNguoiNhan);
		attributeSetterBiConsumers.put(
			"nguoiNhan",
			(BiConsumer<AnPham_DeCuong, Long>)AnPham_DeCuong::setNguoiNhan);
		attributeGetterFunctions.put("nguoiXuLy", AnPham_DeCuong::getNguoiXuLy);
		attributeSetterBiConsumers.put(
			"nguoiXuLy",
			(BiConsumer<AnPham_DeCuong, Long>)AnPham_DeCuong::setNguoiXuLy);
		attributeGetterFunctions.put("ngayXuLy", AnPham_DeCuong::getNgayXuLy);
		attributeSetterBiConsumers.put(
			"ngayXuLy",
			(BiConsumer<AnPham_DeCuong, Date>)AnPham_DeCuong::setNgayXuLy);
		attributeGetterFunctions.put("language", AnPham_DeCuong::getLanguage);
		attributeSetterBiConsumers.put(
			"language",
			(BiConsumer<AnPham_DeCuong, String>)AnPham_DeCuong::setLanguage);
		attributeGetterFunctions.put("status", AnPham_DeCuong::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<AnPham_DeCuong, Integer>)AnPham_DeCuong::setStatus);
		attributeGetterFunctions.put("orders", AnPham_DeCuong::getOrders);
		attributeSetterBiConsumers.put(
			"orders",
			(BiConsumer<AnPham_DeCuong, Long>)AnPham_DeCuong::setOrders);
		attributeGetterFunctions.put(
			"delete_status", AnPham_DeCuong::getDelete_status);
		attributeSetterBiConsumers.put(
			"delete_status",
			(BiConsumer<AnPham_DeCuong, Integer>)
				AnPham_DeCuong::setDelete_status);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@Override
	public String getTen() {
		if (_ten == null) {
			return "";
		}
		else {
			return _ten;
		}
	}

	@Override
	public void setTen(String ten) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ten = ten;
	}

	@Override
	public String getMoTa() {
		if (_moTa == null) {
			return "";
		}
		else {
			return _moTa;
		}
	}

	@Override
	public void setMoTa(String moTa) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_moTa = moTa;
	}

	@Override
	public long getLoaiId() {
		return _loaiId;
	}

	@Override
	public void setLoaiId(long loaiId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_loaiId = loaiId;
	}

	@Override
	public String getNoiDung() {
		if (_noiDung == null) {
			return "";
		}
		else {
			return _noiDung;
		}
	}

	@Override
	public void setNoiDung(String noiDung) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noiDung = noiDung;
	}

	@Override
	public long getPhienBan() {
		return _phienBan;
	}

	@Override
	public void setPhienBan(long phienBan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phienBan = phienBan;
	}

	@Override
	public long getNguoiTao() {
		return _nguoiTao;
	}

	@Override
	public void setNguoiTao(long nguoiTao) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nguoiTao = nguoiTao;
	}

	@Override
	public Date getNgayTao() {
		return _ngayTao;
	}

	@Override
	public void setNgayTao(Date ngayTao) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngayTao = ngayTao;
	}

	@Override
	public long getNguoiSua() {
		return _nguoiSua;
	}

	@Override
	public void setNguoiSua(long nguoiSua) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nguoiSua = nguoiSua;
	}

	@Override
	public Date getNgaySua() {
		return _ngaySua;
	}

	@Override
	public void setNgaySua(Date ngaySua) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngaySua = ngaySua;
	}

	@Override
	public long getNguoiNhan() {
		return _nguoiNhan;
	}

	@Override
	public void setNguoiNhan(long nguoiNhan) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nguoiNhan = nguoiNhan;
	}

	@Override
	public long getNguoiXuLy() {
		return _nguoiXuLy;
	}

	@Override
	public void setNguoiXuLy(long nguoiXuLy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nguoiXuLy = nguoiXuLy;
	}

	@Override
	public Date getNgayXuLy() {
		return _ngayXuLy;
	}

	@Override
	public void setNgayXuLy(Date ngayXuLy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngayXuLy = ngayXuLy;
	}

	@Override
	public String getLanguage() {
		if (_language == null) {
			return "";
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_language = language;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public long getOrders() {
		return _orders;
	}

	@Override
	public void setOrders(long orders) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orders = orders;
	}

	@Override
	public int getDelete_status() {
		return _delete_status;
	}

	@Override
	public void setDelete_status(int delete_status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_delete_status = delete_status;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AnPham_DeCuong.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AnPham_DeCuong toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AnPham_DeCuong>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AnPham_DeCuongImpl anPham_DeCuongImpl = new AnPham_DeCuongImpl();

		anPham_DeCuongImpl.setId(getId());
		anPham_DeCuongImpl.setGroupId(getGroupId());
		anPham_DeCuongImpl.setCompanyId(getCompanyId());
		anPham_DeCuongImpl.setTen(getTen());
		anPham_DeCuongImpl.setMoTa(getMoTa());
		anPham_DeCuongImpl.setLoaiId(getLoaiId());
		anPham_DeCuongImpl.setNoiDung(getNoiDung());
		anPham_DeCuongImpl.setPhienBan(getPhienBan());
		anPham_DeCuongImpl.setNguoiTao(getNguoiTao());
		anPham_DeCuongImpl.setNgayTao(getNgayTao());
		anPham_DeCuongImpl.setNguoiSua(getNguoiSua());
		anPham_DeCuongImpl.setNgaySua(getNgaySua());
		anPham_DeCuongImpl.setNguoiNhan(getNguoiNhan());
		anPham_DeCuongImpl.setNguoiXuLy(getNguoiXuLy());
		anPham_DeCuongImpl.setNgayXuLy(getNgayXuLy());
		anPham_DeCuongImpl.setLanguage(getLanguage());
		anPham_DeCuongImpl.setStatus(getStatus());
		anPham_DeCuongImpl.setOrders(getOrders());
		anPham_DeCuongImpl.setDelete_status(getDelete_status());

		anPham_DeCuongImpl.resetOriginalValues();

		return anPham_DeCuongImpl;
	}

	@Override
	public int compareTo(AnPham_DeCuong anPham_DeCuong) {
		int value = 0;

		if (getId() < anPham_DeCuong.getId()) {
			value = -1;
		}
		else if (getId() > anPham_DeCuong.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AnPham_DeCuong)) {
			return false;
		}

		AnPham_DeCuong anPham_DeCuong = (AnPham_DeCuong)object;

		long primaryKey = anPham_DeCuong.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AnPham_DeCuong> toCacheModel() {
		AnPham_DeCuongCacheModel anPham_DeCuongCacheModel =
			new AnPham_DeCuongCacheModel();

		anPham_DeCuongCacheModel.id = getId();

		anPham_DeCuongCacheModel.groupId = getGroupId();

		anPham_DeCuongCacheModel.companyId = getCompanyId();

		anPham_DeCuongCacheModel.ten = getTen();

		String ten = anPham_DeCuongCacheModel.ten;

		if ((ten != null) && (ten.length() == 0)) {
			anPham_DeCuongCacheModel.ten = null;
		}

		anPham_DeCuongCacheModel.moTa = getMoTa();

		String moTa = anPham_DeCuongCacheModel.moTa;

		if ((moTa != null) && (moTa.length() == 0)) {
			anPham_DeCuongCacheModel.moTa = null;
		}

		anPham_DeCuongCacheModel.loaiId = getLoaiId();

		anPham_DeCuongCacheModel.noiDung = getNoiDung();

		String noiDung = anPham_DeCuongCacheModel.noiDung;

		if ((noiDung != null) && (noiDung.length() == 0)) {
			anPham_DeCuongCacheModel.noiDung = null;
		}

		anPham_DeCuongCacheModel.phienBan = getPhienBan();

		anPham_DeCuongCacheModel.nguoiTao = getNguoiTao();

		Date ngayTao = getNgayTao();

		if (ngayTao != null) {
			anPham_DeCuongCacheModel.ngayTao = ngayTao.getTime();
		}
		else {
			anPham_DeCuongCacheModel.ngayTao = Long.MIN_VALUE;
		}

		anPham_DeCuongCacheModel.nguoiSua = getNguoiSua();

		Date ngaySua = getNgaySua();

		if (ngaySua != null) {
			anPham_DeCuongCacheModel.ngaySua = ngaySua.getTime();
		}
		else {
			anPham_DeCuongCacheModel.ngaySua = Long.MIN_VALUE;
		}

		anPham_DeCuongCacheModel.nguoiNhan = getNguoiNhan();

		anPham_DeCuongCacheModel.nguoiXuLy = getNguoiXuLy();

		Date ngayXuLy = getNgayXuLy();

		if (ngayXuLy != null) {
			anPham_DeCuongCacheModel.ngayXuLy = ngayXuLy.getTime();
		}
		else {
			anPham_DeCuongCacheModel.ngayXuLy = Long.MIN_VALUE;
		}

		anPham_DeCuongCacheModel.language = getLanguage();

		String language = anPham_DeCuongCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			anPham_DeCuongCacheModel.language = null;
		}

		anPham_DeCuongCacheModel.status = getStatus();

		anPham_DeCuongCacheModel.orders = getOrders();

		anPham_DeCuongCacheModel.delete_status = getDelete_status();

		return anPham_DeCuongCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AnPham_DeCuong, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AnPham_DeCuong, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AnPham_DeCuong, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((AnPham_DeCuong)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AnPham_DeCuong, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AnPham_DeCuong, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AnPham_DeCuong, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AnPham_DeCuong)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AnPham_DeCuong>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _id;
	private long _groupId;
	private long _companyId;
	private String _ten;
	private String _moTa;
	private long _loaiId;
	private String _noiDung;
	private long _phienBan;
	private long _nguoiTao;
	private Date _ngayTao;
	private long _nguoiSua;
	private Date _ngaySua;
	private long _nguoiNhan;
	private long _nguoiXuLy;
	private Date _ngayXuLy;
	private String _language;
	private int _status;
	private long _orders;
	private int _delete_status;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AnPham_DeCuong, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AnPham_DeCuong)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("ten", _ten);
		_columnOriginalValues.put("moTa", _moTa);
		_columnOriginalValues.put("loaiId", _loaiId);
		_columnOriginalValues.put("noiDung", _noiDung);
		_columnOriginalValues.put("phienBan", _phienBan);
		_columnOriginalValues.put("nguoiTao", _nguoiTao);
		_columnOriginalValues.put("ngayTao", _ngayTao);
		_columnOriginalValues.put("nguoiSua", _nguoiSua);
		_columnOriginalValues.put("ngaySua", _ngaySua);
		_columnOriginalValues.put("nguoiNhan", _nguoiNhan);
		_columnOriginalValues.put("nguoiXuLy", _nguoiXuLy);
		_columnOriginalValues.put("ngayXuLy", _ngayXuLy);
		_columnOriginalValues.put("language", _language);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("orders", _orders);
		_columnOriginalValues.put("delete_status", _delete_status);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("ten", 8L);

		columnBitmasks.put("moTa", 16L);

		columnBitmasks.put("loaiId", 32L);

		columnBitmasks.put("noiDung", 64L);

		columnBitmasks.put("phienBan", 128L);

		columnBitmasks.put("nguoiTao", 256L);

		columnBitmasks.put("ngayTao", 512L);

		columnBitmasks.put("nguoiSua", 1024L);

		columnBitmasks.put("ngaySua", 2048L);

		columnBitmasks.put("nguoiNhan", 4096L);

		columnBitmasks.put("nguoiXuLy", 8192L);

		columnBitmasks.put("ngayXuLy", 16384L);

		columnBitmasks.put("language", 32768L);

		columnBitmasks.put("status", 65536L);

		columnBitmasks.put("orders", 131072L);

		columnBitmasks.put("delete_status", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AnPham_DeCuong _escapedModel;

}