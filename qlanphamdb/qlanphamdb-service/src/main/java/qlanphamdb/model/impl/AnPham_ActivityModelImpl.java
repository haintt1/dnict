/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package qlanphamdb.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import qlanphamdb.model.AnPham_Activity;
import qlanphamdb.model.AnPham_ActivityModel;

/**
 * The base model implementation for the AnPham_Activity service. Represents a row in the &quot;cw_AnPham_Activity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AnPham_ActivityModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AnPham_ActivityImpl}.
 * </p>
 *
 * @author dnict
 * @see AnPham_ActivityImpl
 * @generated
 */
public class AnPham_ActivityModelImpl
	extends BaseModelImpl<AnPham_Activity> implements AnPham_ActivityModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a an pham_ activity model instance should use the <code>AnPham_Activity</code> interface instead.
	 */
	public static final String TABLE_NAME = "cw_AnPham_Activity";

	public static final Object[][] TABLE_COLUMNS = {
		{"companyId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"id_", Types.BIGINT}, {"deCuongId", Types.BIGINT},
		{"anPhamId", Types.BIGINT}, {"startuserid", Types.BIGINT},
		{"enduserid", Types.BIGINT}, {"contentrequest", Types.VARCHAR},
		{"statusofarticle", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("deCuongId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("anPhamId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startuserid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("enduserid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("contentrequest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusofarticle", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cw_AnPham_Activity (companyId LONG,groupId LONG,id_ LONG not null primary key,deCuongId LONG,anPhamId LONG,startuserid LONG,enduserid LONG,contentrequest VARCHAR(75) null,statusofarticle INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table cw_AnPham_Activity";

	public static final String ORDER_BY_JPQL =
		" ORDER BY anPham_Activity.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY cw_AnPham_Activity.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AnPham_ActivityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AnPham_Activity.class;
	}

	@Override
	public String getModelClassName() {
		return AnPham_Activity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AnPham_Activity, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AnPham_Activity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AnPham_Activity, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AnPham_Activity)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AnPham_Activity, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AnPham_Activity, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AnPham_Activity)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AnPham_Activity, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AnPham_Activity, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AnPham_Activity>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AnPham_Activity.class.getClassLoader(), AnPham_Activity.class,
			ModelWrapper.class);

		try {
			Constructor<AnPham_Activity> constructor =
				(Constructor<AnPham_Activity>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<AnPham_Activity, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AnPham_Activity, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AnPham_Activity, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<AnPham_Activity, Object>>();
		Map<String, BiConsumer<AnPham_Activity, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<AnPham_Activity, ?>>();

		attributeGetterFunctions.put(
			"companyId", AnPham_Activity::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<AnPham_Activity, Long>)AnPham_Activity::setCompanyId);
		attributeGetterFunctions.put("groupId", AnPham_Activity::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<AnPham_Activity, Long>)AnPham_Activity::setGroupId);
		attributeGetterFunctions.put("id", AnPham_Activity::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<AnPham_Activity, Long>)AnPham_Activity::setId);
		attributeGetterFunctions.put(
			"deCuongId", AnPham_Activity::getDeCuongId);
		attributeSetterBiConsumers.put(
			"deCuongId",
			(BiConsumer<AnPham_Activity, Long>)AnPham_Activity::setDeCuongId);
		attributeGetterFunctions.put("anPhamId", AnPham_Activity::getAnPhamId);
		attributeSetterBiConsumers.put(
			"anPhamId",
			(BiConsumer<AnPham_Activity, Long>)AnPham_Activity::setAnPhamId);
		attributeGetterFunctions.put(
			"startuserid", AnPham_Activity::getStartuserid);
		attributeSetterBiConsumers.put(
			"startuserid",
			(BiConsumer<AnPham_Activity, Long>)AnPham_Activity::setStartuserid);
		attributeGetterFunctions.put(
			"enduserid", AnPham_Activity::getEnduserid);
		attributeSetterBiConsumers.put(
			"enduserid",
			(BiConsumer<AnPham_Activity, Long>)AnPham_Activity::setEnduserid);
		attributeGetterFunctions.put(
			"contentrequest", AnPham_Activity::getContentrequest);
		attributeSetterBiConsumers.put(
			"contentrequest",
			(BiConsumer<AnPham_Activity, String>)
				AnPham_Activity::setContentrequest);
		attributeGetterFunctions.put(
			"statusofarticle", AnPham_Activity::getStatusofarticle);
		attributeSetterBiConsumers.put(
			"statusofarticle",
			(BiConsumer<AnPham_Activity, Integer>)
				AnPham_Activity::setStatusofarticle);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public long getDeCuongId() {
		return _deCuongId;
	}

	@Override
	public void setDeCuongId(long deCuongId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deCuongId = deCuongId;
	}

	@Override
	public long getAnPhamId() {
		return _anPhamId;
	}

	@Override
	public void setAnPhamId(long anPhamId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_anPhamId = anPhamId;
	}

	@Override
	public long getStartuserid() {
		return _startuserid;
	}

	@Override
	public void setStartuserid(long startuserid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startuserid = startuserid;
	}

	@Override
	public long getEnduserid() {
		return _enduserid;
	}

	@Override
	public void setEnduserid(long enduserid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_enduserid = enduserid;
	}

	@Override
	public String getContentrequest() {
		if (_contentrequest == null) {
			return "";
		}
		else {
			return _contentrequest;
		}
	}

	@Override
	public void setContentrequest(String contentrequest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contentrequest = contentrequest;
	}

	@Override
	public int getStatusofarticle() {
		return _statusofarticle;
	}

	@Override
	public void setStatusofarticle(int statusofarticle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusofarticle = statusofarticle;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AnPham_Activity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AnPham_Activity toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AnPham_Activity>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AnPham_ActivityImpl anPham_ActivityImpl = new AnPham_ActivityImpl();

		anPham_ActivityImpl.setCompanyId(getCompanyId());
		anPham_ActivityImpl.setGroupId(getGroupId());
		anPham_ActivityImpl.setId(getId());
		anPham_ActivityImpl.setDeCuongId(getDeCuongId());
		anPham_ActivityImpl.setAnPhamId(getAnPhamId());
		anPham_ActivityImpl.setStartuserid(getStartuserid());
		anPham_ActivityImpl.setEnduserid(getEnduserid());
		anPham_ActivityImpl.setContentrequest(getContentrequest());
		anPham_ActivityImpl.setStatusofarticle(getStatusofarticle());

		anPham_ActivityImpl.resetOriginalValues();

		return anPham_ActivityImpl;
	}

	@Override
	public int compareTo(AnPham_Activity anPham_Activity) {
		long primaryKey = anPham_Activity.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AnPham_Activity)) {
			return false;
		}

		AnPham_Activity anPham_Activity = (AnPham_Activity)object;

		long primaryKey = anPham_Activity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AnPham_Activity> toCacheModel() {
		AnPham_ActivityCacheModel anPham_ActivityCacheModel =
			new AnPham_ActivityCacheModel();

		anPham_ActivityCacheModel.companyId = getCompanyId();

		anPham_ActivityCacheModel.groupId = getGroupId();

		anPham_ActivityCacheModel.id = getId();

		anPham_ActivityCacheModel.deCuongId = getDeCuongId();

		anPham_ActivityCacheModel.anPhamId = getAnPhamId();

		anPham_ActivityCacheModel.startuserid = getStartuserid();

		anPham_ActivityCacheModel.enduserid = getEnduserid();

		anPham_ActivityCacheModel.contentrequest = getContentrequest();

		String contentrequest = anPham_ActivityCacheModel.contentrequest;

		if ((contentrequest != null) && (contentrequest.length() == 0)) {
			anPham_ActivityCacheModel.contentrequest = null;
		}

		anPham_ActivityCacheModel.statusofarticle = getStatusofarticle();

		return anPham_ActivityCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AnPham_Activity, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AnPham_Activity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AnPham_Activity, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((AnPham_Activity)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AnPham_Activity, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AnPham_Activity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AnPham_Activity, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AnPham_Activity)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AnPham_Activity>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _companyId;
	private long _groupId;
	private long _id;
	private long _deCuongId;
	private long _anPhamId;
	private long _startuserid;
	private long _enduserid;
	private String _contentrequest;
	private int _statusofarticle;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AnPham_Activity, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AnPham_Activity)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("deCuongId", _deCuongId);
		_columnOriginalValues.put("anPhamId", _anPhamId);
		_columnOriginalValues.put("startuserid", _startuserid);
		_columnOriginalValues.put("enduserid", _enduserid);
		_columnOriginalValues.put("contentrequest", _contentrequest);
		_columnOriginalValues.put("statusofarticle", _statusofarticle);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("companyId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("id_", 4L);

		columnBitmasks.put("deCuongId", 8L);

		columnBitmasks.put("anPhamId", 16L);

		columnBitmasks.put("startuserid", 32L);

		columnBitmasks.put("enduserid", 64L);

		columnBitmasks.put("contentrequest", 128L);

		columnBitmasks.put("statusofarticle", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AnPham_Activity _escapedModel;

}