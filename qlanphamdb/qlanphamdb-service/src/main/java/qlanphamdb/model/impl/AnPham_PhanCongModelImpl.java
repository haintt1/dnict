/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package qlanphamdb.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import qlanphamdb.model.AnPham_PhanCong;
import qlanphamdb.model.AnPham_PhanCongModel;

/**
 * The base model implementation for the AnPham_PhanCong service. Represents a row in the &quot;cw_AnPham_PhanCong&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AnPham_PhanCongModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AnPham_PhanCongImpl}.
 * </p>
 *
 * @author dnict
 * @see AnPham_PhanCongImpl
 * @generated
 */
public class AnPham_PhanCongModelImpl
	extends BaseModelImpl<AnPham_PhanCong> implements AnPham_PhanCongModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a an pham_ phan cong model instance should use the <code>AnPham_PhanCong</code> interface instead.
	 */
	public static final String TABLE_NAME = "cw_AnPham_PhanCong";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"loaiId", Types.BIGINT},
		{"deCuongId", Types.BIGINT}, {"ctvId", Types.BIGINT},
		{"noiDung", Types.VARCHAR}, {"ghiChu", Types.VARCHAR},
		{"ngaybatdau", Types.TIMESTAMP}, {"ngayketthuc", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"is_gui", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("loaiId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("deCuongId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ctvId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("noiDung", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ghiChu", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ngaybatdau", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ngayketthuc", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("is_gui", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cw_AnPham_PhanCong (id_ LONG not null primary key,companyId LONG,groupId LONG,loaiId LONG,deCuongId LONG,ctvId LONG,noiDung VARCHAR(75) null,ghiChu VARCHAR(75) null,ngaybatdau DATE null,ngayketthuc DATE null,status INTEGER,is_gui INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table cw_AnPham_PhanCong";

	public static final String ORDER_BY_JPQL =
		" ORDER BY anPham_PhanCong.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY cw_AnPham_PhanCong.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AnPham_PhanCongModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AnPham_PhanCong.class;
	}

	@Override
	public String getModelClassName() {
		return AnPham_PhanCong.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AnPham_PhanCong, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AnPham_PhanCong, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AnPham_PhanCong, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AnPham_PhanCong)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AnPham_PhanCong, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AnPham_PhanCong, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AnPham_PhanCong)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AnPham_PhanCong, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AnPham_PhanCong, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AnPham_PhanCong>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AnPham_PhanCong.class.getClassLoader(), AnPham_PhanCong.class,
			ModelWrapper.class);

		try {
			Constructor<AnPham_PhanCong> constructor =
				(Constructor<AnPham_PhanCong>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<AnPham_PhanCong, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AnPham_PhanCong, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AnPham_PhanCong, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<AnPham_PhanCong, Object>>();
		Map<String, BiConsumer<AnPham_PhanCong, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<AnPham_PhanCong, ?>>();

		attributeGetterFunctions.put("id", AnPham_PhanCong::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<AnPham_PhanCong, Long>)AnPham_PhanCong::setId);
		attributeGetterFunctions.put(
			"companyId", AnPham_PhanCong::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<AnPham_PhanCong, Long>)AnPham_PhanCong::setCompanyId);
		attributeGetterFunctions.put("groupId", AnPham_PhanCong::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<AnPham_PhanCong, Long>)AnPham_PhanCong::setGroupId);
		attributeGetterFunctions.put("loaiId", AnPham_PhanCong::getLoaiId);
		attributeSetterBiConsumers.put(
			"loaiId",
			(BiConsumer<AnPham_PhanCong, Long>)AnPham_PhanCong::setLoaiId);
		attributeGetterFunctions.put(
			"deCuongId", AnPham_PhanCong::getDeCuongId);
		attributeSetterBiConsumers.put(
			"deCuongId",
			(BiConsumer<AnPham_PhanCong, Long>)AnPham_PhanCong::setDeCuongId);
		attributeGetterFunctions.put("ctvId", AnPham_PhanCong::getCtvId);
		attributeSetterBiConsumers.put(
			"ctvId",
			(BiConsumer<AnPham_PhanCong, Long>)AnPham_PhanCong::setCtvId);
		attributeGetterFunctions.put("noiDung", AnPham_PhanCong::getNoiDung);
		attributeSetterBiConsumers.put(
			"noiDung",
			(BiConsumer<AnPham_PhanCong, String>)AnPham_PhanCong::setNoiDung);
		attributeGetterFunctions.put("ghiChu", AnPham_PhanCong::getGhiChu);
		attributeSetterBiConsumers.put(
			"ghiChu",
			(BiConsumer<AnPham_PhanCong, String>)AnPham_PhanCong::setGhiChu);
		attributeGetterFunctions.put(
			"ngaybatdau", AnPham_PhanCong::getNgaybatdau);
		attributeSetterBiConsumers.put(
			"ngaybatdau",
			(BiConsumer<AnPham_PhanCong, Date>)AnPham_PhanCong::setNgaybatdau);
		attributeGetterFunctions.put(
			"ngayketthuc", AnPham_PhanCong::getNgayketthuc);
		attributeSetterBiConsumers.put(
			"ngayketthuc",
			(BiConsumer<AnPham_PhanCong, Date>)AnPham_PhanCong::setNgayketthuc);
		attributeGetterFunctions.put("status", AnPham_PhanCong::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<AnPham_PhanCong, Integer>)AnPham_PhanCong::setStatus);
		attributeGetterFunctions.put("is_gui", AnPham_PhanCong::getIs_gui);
		attributeSetterBiConsumers.put(
			"is_gui",
			(BiConsumer<AnPham_PhanCong, Integer>)AnPham_PhanCong::setIs_gui);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@Override
	public long getLoaiId() {
		return _loaiId;
	}

	@Override
	public void setLoaiId(long loaiId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_loaiId = loaiId;
	}

	@Override
	public long getDeCuongId() {
		return _deCuongId;
	}

	@Override
	public void setDeCuongId(long deCuongId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deCuongId = deCuongId;
	}

	@Override
	public long getCtvId() {
		return _ctvId;
	}

	@Override
	public void setCtvId(long ctvId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ctvId = ctvId;
	}

	@Override
	public String getNoiDung() {
		if (_noiDung == null) {
			return "";
		}
		else {
			return _noiDung;
		}
	}

	@Override
	public void setNoiDung(String noiDung) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_noiDung = noiDung;
	}

	@Override
	public String getGhiChu() {
		if (_ghiChu == null) {
			return "";
		}
		else {
			return _ghiChu;
		}
	}

	@Override
	public void setGhiChu(String ghiChu) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ghiChu = ghiChu;
	}

	@Override
	public Date getNgaybatdau() {
		return _ngaybatdau;
	}

	@Override
	public void setNgaybatdau(Date ngaybatdau) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngaybatdau = ngaybatdau;
	}

	@Override
	public Date getNgayketthuc() {
		return _ngayketthuc;
	}

	@Override
	public void setNgayketthuc(Date ngayketthuc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngayketthuc = ngayketthuc;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public int getIs_gui() {
		return _is_gui;
	}

	@Override
	public void setIs_gui(int is_gui) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_is_gui = is_gui;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AnPham_PhanCong.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AnPham_PhanCong toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AnPham_PhanCong>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AnPham_PhanCongImpl anPham_PhanCongImpl = new AnPham_PhanCongImpl();

		anPham_PhanCongImpl.setId(getId());
		anPham_PhanCongImpl.setCompanyId(getCompanyId());
		anPham_PhanCongImpl.setGroupId(getGroupId());
		anPham_PhanCongImpl.setLoaiId(getLoaiId());
		anPham_PhanCongImpl.setDeCuongId(getDeCuongId());
		anPham_PhanCongImpl.setCtvId(getCtvId());
		anPham_PhanCongImpl.setNoiDung(getNoiDung());
		anPham_PhanCongImpl.setGhiChu(getGhiChu());
		anPham_PhanCongImpl.setNgaybatdau(getNgaybatdau());
		anPham_PhanCongImpl.setNgayketthuc(getNgayketthuc());
		anPham_PhanCongImpl.setStatus(getStatus());
		anPham_PhanCongImpl.setIs_gui(getIs_gui());

		anPham_PhanCongImpl.resetOriginalValues();

		return anPham_PhanCongImpl;
	}

	@Override
	public int compareTo(AnPham_PhanCong anPham_PhanCong) {
		long primaryKey = anPham_PhanCong.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AnPham_PhanCong)) {
			return false;
		}

		AnPham_PhanCong anPham_PhanCong = (AnPham_PhanCong)object;

		long primaryKey = anPham_PhanCong.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AnPham_PhanCong> toCacheModel() {
		AnPham_PhanCongCacheModel anPham_PhanCongCacheModel =
			new AnPham_PhanCongCacheModel();

		anPham_PhanCongCacheModel.id = getId();

		anPham_PhanCongCacheModel.companyId = getCompanyId();

		anPham_PhanCongCacheModel.groupId = getGroupId();

		anPham_PhanCongCacheModel.loaiId = getLoaiId();

		anPham_PhanCongCacheModel.deCuongId = getDeCuongId();

		anPham_PhanCongCacheModel.ctvId = getCtvId();

		anPham_PhanCongCacheModel.noiDung = getNoiDung();

		String noiDung = anPham_PhanCongCacheModel.noiDung;

		if ((noiDung != null) && (noiDung.length() == 0)) {
			anPham_PhanCongCacheModel.noiDung = null;
		}

		anPham_PhanCongCacheModel.ghiChu = getGhiChu();

		String ghiChu = anPham_PhanCongCacheModel.ghiChu;

		if ((ghiChu != null) && (ghiChu.length() == 0)) {
			anPham_PhanCongCacheModel.ghiChu = null;
		}

		Date ngaybatdau = getNgaybatdau();

		if (ngaybatdau != null) {
			anPham_PhanCongCacheModel.ngaybatdau = ngaybatdau.getTime();
		}
		else {
			anPham_PhanCongCacheModel.ngaybatdau = Long.MIN_VALUE;
		}

		Date ngayketthuc = getNgayketthuc();

		if (ngayketthuc != null) {
			anPham_PhanCongCacheModel.ngayketthuc = ngayketthuc.getTime();
		}
		else {
			anPham_PhanCongCacheModel.ngayketthuc = Long.MIN_VALUE;
		}

		anPham_PhanCongCacheModel.status = getStatus();

		anPham_PhanCongCacheModel.is_gui = getIs_gui();

		return anPham_PhanCongCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AnPham_PhanCong, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AnPham_PhanCong, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AnPham_PhanCong, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((AnPham_PhanCong)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AnPham_PhanCong, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AnPham_PhanCong, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AnPham_PhanCong, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AnPham_PhanCong)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AnPham_PhanCong>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _id;
	private long _companyId;
	private long _groupId;
	private long _loaiId;
	private long _deCuongId;
	private long _ctvId;
	private String _noiDung;
	private String _ghiChu;
	private Date _ngaybatdau;
	private Date _ngayketthuc;
	private int _status;
	private int _is_gui;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AnPham_PhanCong, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AnPham_PhanCong)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("loaiId", _loaiId);
		_columnOriginalValues.put("deCuongId", _deCuongId);
		_columnOriginalValues.put("ctvId", _ctvId);
		_columnOriginalValues.put("noiDung", _noiDung);
		_columnOriginalValues.put("ghiChu", _ghiChu);
		_columnOriginalValues.put("ngaybatdau", _ngaybatdau);
		_columnOriginalValues.put("ngayketthuc", _ngayketthuc);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("is_gui", _is_gui);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("companyId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("loaiId", 8L);

		columnBitmasks.put("deCuongId", 16L);

		columnBitmasks.put("ctvId", 32L);

		columnBitmasks.put("noiDung", 64L);

		columnBitmasks.put("ghiChu", 128L);

		columnBitmasks.put("ngaybatdau", 256L);

		columnBitmasks.put("ngayketthuc", 512L);

		columnBitmasks.put("status", 1024L);

		columnBitmasks.put("is_gui", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AnPham_PhanCong _escapedModel;

}